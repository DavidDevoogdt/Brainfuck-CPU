Qflow synthesis logfile created on Fr Sep 21 16:11:15 CEST 2018
Running yosys for verilog parsing and synthesis
yosys  -s BFCPU.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)


-- Executing script file `BFCPU.ys' --

1. Executing Liberty frontend.
Imported 32 cell types from liberty file.

2. Executing Verilog-2005 frontend.
Parsing Verilog input from `/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v' to AST representation.
Generating RTLIL representation for module `\BFCPU'.
Generating RTLIL representation for module `\OPC'.
Note: Assuming pure combinatorial block at /home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:106 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\DPC'.
Generating RTLIL representation for module `\DC'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \BFCPU
Used module:     \DC
Used module:     \DPC
Used module:     \OPC

3.1.2. Analyzing design hierarchy..
Top module:  \BFCPU
Used module:     \DC
Used module:     \DPC
Used module:     \OPC
Removed 0 unused modules.
Mapping positional arguments of cell BFCPU.DC1 (DC).
Mapping positional arguments of cell BFCPU.DPC1 (DPC).
Mapping positional arguments of cell BFCPU.OPC1 (OPC).

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:106$12 in module OPC.
Removed a total of 1 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\DC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:389$42'.
  Set init value: \OUTPD = 16'0000000000000000
  Set init value: \WDATA = 8'00000000
  Set init value: \IR = 1'0
  Set init value: \OW = 1'0
Found init rule in `\DPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:367$34'.
  Set init value: \DP = 15'000000000000000
Found init rule in `\OPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:98$29'.
  Set init value: \INST = 4'0010
Found init rule in `\OPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:96$28'.
  Set init value: \bracketdelta = 0
Found init rule in `\OPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:58$27'.
  Set init value: \PCDELTA = 16'0000000000000000
Found init rule in `\BFCPU.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:41$11'.
  Set init value: \reset = 1'0

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\DC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:389$42'.
     1/4: $1\WDATA[7:0]
     2/4: $1\OUTPD[15:0]
     3/4: $1\OW[0:0]
     4/4: $1\IR[0:0]
Creating decoders for process `\DC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:396$36'.
     1/4: $0\OW[0:0]
     2/4: $0\IR[0:0]
     3/4: $0\WDATA[7:0]
     4/4: $0\OUTPD[15:0]
Creating decoders for process `\DPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:367$34'.
     1/1: $1\DP[14:0]
Creating decoders for process `\DPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:371$30'.
     1/1: $0\DP[14:0]
Creating decoders for process `\OPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:98$29'.
     1/1: $1\INST[3:0]
Creating decoders for process `\OPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:96$28'.
     1/1: $9\bracketdelta[31:0]
Creating decoders for process `\OPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:58$27'.
     1/1: $14\PCDELTA[15:0]
Creating decoders for process `\OPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:350$24'.
     1/3: $0\INST[3:0]
     2/3: $8\bracketdelta[31:0]
     3/3: $4\bracketcount[7:0]
Creating decoders for process `\OPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:106$12'.
     1/40: $7\bracketdelta[31:0]
     2/40: $6\bracketdelta[31:0]
     3/40: $13\NEXTSTATE[3:0]
     4/40: $13\PCDELTA[15:0]
     5/40: $5\bracketdelta[31:0]
     6/40: $4\bracketdelta[31:0]
     7/40: $3\bracketdelta[31:0]
     8/40: $12\PCDELTA[15:0]
     9/40: $12\NEXTSTATE[3:0]
    10/40: $2\bracketdelta[31:0]
    11/40: $11\PCDELTA[15:0]
    12/40: $11\NEXTSTATE[3:0]
    13/40: $3\bracketcount[7:0]
    14/40: $10\PCDELTA[15:0]
    15/40: $2\bracketcount[7:0]
    16/40: $10\NEXTSTATE[3:0]
    17/40: $9\PCDELTA[15:0]
    18/40: $9\NEXTSTATE[3:0]
    19/40: $8\PCDELTA[15:0]
    20/40: $8\NEXTSTATE[3:0]
    21/40: $7\PCDELTA[15:0]
    22/40: $7\NEXTSTATE[3:0]
    23/40: $6\PCDELTA[15:0]
    24/40: $6\NEXTSTATE[3:0]
    25/40: $5\PCDELTA[15:0]
    26/40: $5\NEXTSTATE[3:0]
    27/40: $4\PCDELTA[15:0]
    28/40: $4\NEXTSTATE[3:0]
    29/40: $3\PCDELTA[15:0]
    30/40: $3\NEXTSTATE[3:0]
    31/40: $2\PCDELTA[15:0]
    32/40: $2\NEXTSTATE[3:0]
    33/40: $1\NEXTSTATE[3:0]
    34/40: $1\PCDELTA[15:0]
    35/40: $1\bracketdelta[31:0]
    36/40: $1\bracketcount[7:0]
    37/40: $0\bracketdelta[31:0]
    38/40: $0\bracketcount[7:0]
    39/40: $0\NEXTSTATE[3:0]
    40/40: $0\PCDELTA[15:0]
Creating decoders for process `\BFCPU.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:41$11'.
     1/1: $1\reset[0:0]
Creating decoders for process `\BFCPU.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:45$8'.
     1/1: $0\reset[0:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\OPC.\PCDELTA' from process `\OPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:106$12'.
No latch inferred for signal `\OPC.\NEXTSTATE' from process `\OPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:106$12'.
Latch inferred for signal `\OPC.\bracketcount' from process `\OPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:106$12': $auto$proc_dlatch.cc:408:proc_dlatch$668
Latch inferred for signal `\OPC.\bracketdelta' from process `\OPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:106$12': $auto$proc_dlatch.cc:408:proc_dlatch$861

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\DC.\OUTPD' using process `\DC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:396$36'.
  created $dff cell `$procdff$862' with positive edge clock.
Creating register for signal `\DC.\WDATA' using process `\DC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:396$36'.
  created $dff cell `$procdff$863' with positive edge clock.
Creating register for signal `\DC.\IR' using process `\DC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:396$36'.
  created $dff cell `$procdff$864' with positive edge clock.
Creating register for signal `\DC.\OW' using process `\DC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:396$36'.
  created $dff cell `$procdff$865' with positive edge clock.
Creating register for signal `\DPC.\DP' using process `\DPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:371$30'.
  created $dff cell `$procdff$866' with positive edge clock.
Creating register for signal `\OPC.\INST' using process `\OPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:350$24'.
  created $dff cell `$procdff$867' with positive edge clock.
Creating register for signal `\OPC.\bracketcount' using process `\OPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:350$24'.
  created $dff cell `$procdff$868' with positive edge clock.
Creating register for signal `\OPC.\bracketdelta' using process `\OPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:350$24'.
  created $dff cell `$procdff$869' with positive edge clock.
Creating register for signal `\BFCPU.\reset' using process `\BFCPU.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:45$8'.
  created $dff cell `$procdff$870' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `DC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:389$42'.
Found and cleaned up 4 empty switches in `\DC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:396$36'.
Removing empty process `DC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:396$36'.
Removing empty process `DPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:367$34'.
Found and cleaned up 1 empty switch in `\DPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:371$30'.
Removing empty process `DPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:371$30'.
Removing empty process `OPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:98$29'.
Removing empty process `OPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:96$28'.
Removing empty process `OPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:58$27'.
Found and cleaned up 1 empty switch in `\OPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:350$24'.
Removing empty process `OPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:350$24'.
Found and cleaned up 17 empty switches in `\OPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:106$12'.
Removing empty process `OPC.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:106$12'.
Removing empty process `BFCPU.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:41$11'.
Found and cleaned up 1 empty switch in `\BFCPU.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:45$8'.
Removing empty process `BFCPU.$proc$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:45$8'.
Cleaned up 24 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Replacing $eq cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:387$35' in module `DC' with $logic_not.
Replacing $eq cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$15' in module `OPC' with $logic_not.
Replacing $eq cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:319$20' in module `OPC' with $logic_not.
Replacing $ne cell `$ne$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:355$25' in module `OPC' with $logic_not.
Replacing $mux cell `$procmux$102' (?) in module `\OPC' with constant driver `$procmux$102_Y = 1'.
Replacing $mux cell `$procmux$105' (0) in module `\OPC' with constant driver `$procmux$105_Y = $procmux$102_Y'.
Replacing $mux cell `$procmux$107' (?) in module `\OPC' with constant driver `$procmux$107_Y = $procmux$105_Y'.
Replacing $mux cell `$procmux$96' (0) in module `\OPC' with constant driver `$procmux$96_Y = $procmux$93_Y'.
Replacing $mux cell `$procmux$98' (?) in module `\OPC' with constant driver `$procmux$98_Y = $procmux$96_Y'.
Replacing $mux cell `$procmux$123' (0) in module `\OPC' with constant driver `$procmux$123_Y = $7\bracketdelta[31:0]'.
Replacing $mux cell `$procmux$125' (?) in module `\OPC' with constant driver `$procmux$125_Y = $procmux$123_Y'.
Replacing $mux cell `$procmux$140' (?) in module `\OPC' with constant driver `$procmux$140_Y = 1'.
Replacing $mux cell `$procmux$143' (0) in module `\OPC' with constant driver `$procmux$143_Y = $procmux$140_Y'.
Replacing $mux cell `$procmux$145' (?) in module `\OPC' with constant driver `$procmux$145_Y = $procmux$143_Y'.
Replacing $mux cell `$procmux$133' (0) in module `\OPC' with constant driver `$procmux$133_Y = $procmux$130_Y'.
Replacing $mux cell `$procmux$135' (?) in module `\OPC' with constant driver `$procmux$135_Y = $procmux$133_Y'.
Replacing $mux cell `$procmux$163' (0) in module `\OPC' with constant driver `$procmux$163_Y = $4\bracketdelta[31:0]'.
Replacing $mux cell `$procmux$165' (?) in module `\OPC' with constant driver `$procmux$165_Y = $procmux$163_Y'.
Optimizing away select inverter for $mux cell `$procmux$171' in module `OPC'.
Optimizing away select inverter for $mux cell `$procmux$179' in module `OPC'.
Optimizing away select inverter for $mux cell `$procmux$187' in module `OPC'.
Replacing $mux cell `$procmux$189' (?) in module `\OPC' with constant driver `$procmux$189_Y = $procmux$187_Y'.
Replacing $mux cell `$procmux$205' (?) in module `\OPC' with constant driver `$procmux$205_Y = 8'00000000'.
Replacing $mux cell `$procmux$207' (?) in module `\OPC' with constant driver `$procmux$207_Y = $procmux$205_Y'.
Replacing $eq cell `$procmux$273_CMP0' in module `OPC' with $logic_not.
Replacing $eq cell `$procmux$290_CMP0' in module `OPC' with $logic_not.
Replacing $eq cell `$procmux$308_CMP0' in module `OPC' with $logic_not.
Replacing $eq cell `$procmux$310_CMP0' in module `OPC' with $logic_not.
Replacing $eq cell `$procmux$326_CMP0' in module `OPC' with $logic_not.
Replacing $eq cell `$procmux$328_CMP0' in module `OPC' with $logic_not.
Replacing $eq cell `$procmux$346_CMP0' in module `OPC' with $logic_not.
Replacing $eq cell `$procmux$366_CMP0' in module `OPC' with $logic_not.
Replacing $eq cell `$procmux$387_CMP0' in module `OPC' with $logic_not.
Replacing $eq cell `$procmux$408_CMP0' in module `OPC' with $logic_not.
Replacing $eq cell `$procmux$430_CMP0' in module `OPC' with $logic_not.
Replacing $eq cell `$procmux$452_CMP0' in module `OPC' with $logic_not.
Replacing $eq cell `$procmux$475_CMP0' in module `OPC' with $logic_not.
Replacing $eq cell `$procmux$498_CMP0' in module `OPC' with $logic_not.
Replacing $eq cell `$procmux$513_CMP0' in module `OPC' with $logic_not.
Replacing $eq cell `$procmux$530_CMP0' in module `OPC' with $logic_not.
Replacing $eq cell `$procmux$547_CMP0' in module `OPC' with $logic_not.
Replacing $eq cell `$procmux$564_CMP0' in module `OPC' with $logic_not.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$572' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$573 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$576' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$577 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$580' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$581 = 1'1'.
Replacing $not cell `$auto$proc_dlatch.cc:238:make_hold$584' (double_invert) in module `\OPC' with constant driver `$auto$rtlil.cc:1600:Not$585 = \IZ'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$586' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$587 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$590' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$591 = $auto$rtlil.cc:1629:And$589'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$592' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$593 = $auto$rtlil.cc:1604:ReduceOr$591'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$596' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$597 = $auto$rtlil.cc:1629:And$595'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$598' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$599 = $auto$rtlil.cc:1604:ReduceOr$597'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$604' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$605 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$608' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$609 = $auto$rtlil.cc:1629:And$607'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$610' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$611 = $auto$rtlil.cc:1604:ReduceOr$609'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$614' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$615 = $auto$rtlil.cc:1629:And$613'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$616' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$617 = $auto$rtlil.cc:1604:ReduceOr$615'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$620' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$621 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$624' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$625 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$628' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$629 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$632' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$633 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$636' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$637 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$640' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$641 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$644' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$645 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$648' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$649 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$652' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$653 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$656' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$657 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$660' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$661 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$669' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$670 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$683' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$684 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$687' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$688 = $auto$rtlil.cc:1629:And$686'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$689' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$690 = $auto$rtlil.cc:1604:ReduceOr$688'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$693' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$694 = $auto$rtlil.cc:1629:And$692'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$695' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$696 = $auto$rtlil.cc:1604:ReduceOr$694'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$699' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$700 = $auto$rtlil.cc:1629:And$698'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$701' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$702 = $auto$rtlil.cc:1604:ReduceOr$700'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$705' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$706 = $auto$rtlil.cc:1629:And$704'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$707' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$708 = $auto$rtlil.cc:1604:ReduceOr$706'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$711' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$712 = $auto$rtlil.cc:1629:And$710'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$713' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$714 = $auto$rtlil.cc:1604:ReduceOr$712'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$717' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$718 = $auto$rtlil.cc:1629:And$716'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$719' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$720 = $auto$rtlil.cc:1604:ReduceOr$718'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$723' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$724 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$729' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$730 = $auto$rtlil.cc:1604:ReduceOr$728'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$733' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$734 = $auto$rtlil.cc:1629:And$732'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$735' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$736 = $auto$rtlil.cc:1604:ReduceOr$734'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$749' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$750 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$753' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$754 = $auto$rtlil.cc:1629:And$752'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$755' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$756 = $auto$rtlil.cc:1604:ReduceOr$754'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$759' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$760 = $auto$rtlil.cc:1629:And$758'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$761' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$762 = $auto$rtlil.cc:1604:ReduceOr$760'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$765' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$766 = $auto$rtlil.cc:1629:And$764'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$767' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$768 = $auto$rtlil.cc:1604:ReduceOr$766'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$771' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$772 = $auto$rtlil.cc:1629:And$770'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$773' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$774 = $auto$rtlil.cc:1604:ReduceOr$772'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$777' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$778 = $auto$rtlil.cc:1629:And$776'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$779' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$780 = $auto$rtlil.cc:1604:ReduceOr$778'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$783' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$784 = $auto$rtlil.cc:1629:And$782'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$785' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$786 = $auto$rtlil.cc:1604:ReduceOr$784'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$789' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$790 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$795' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$796 = $auto$rtlil.cc:1604:ReduceOr$794'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$799' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$800 = $auto$rtlil.cc:1629:And$798'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$801' (unary_buffer) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$802 = $auto$rtlil.cc:1604:ReduceOr$800'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$805' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$806 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$809' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$810 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$813' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$814 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$817' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$818 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$821' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$822 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$825' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$826 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$829' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$830 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$833' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$834 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$837' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$838 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$841' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$842 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$845' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$846 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$849' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$850 = 1'1'.
Replacing $reduce_or cell `$auto$proc_dlatch.cc:247:make_hold$853' (const_or) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$854 = 1'1'.
Replacing $mux cell `$procmux$187' (?) in module `\OPC' with constant driver `$procmux$187_Y = 8'00000000'.
Replacing $eq cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:31$4' in module `BFCPU' with $logic_not.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \DC..
Finding unused cells or wires in module \DPC..
Finding unused cells or wires in module \OPC..
  removing unused `$logic_not' cell `$logic_not$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:293$13'.
Finding unused cells or wires in module \BFCPU..
  removing unused non-port wire \PC.
  removed 1 unused temporary wires.

3.5. Executing CHECK pass (checking for obvious problems).
checking module BFCPU..
checking module DC..
checking module DPC..
checking module OPC..
Warning: multiple conflicting drivers for OPC.\bracketdelta [31]:
    port Q[31] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[31] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [30]:
    port Q[30] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[30] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [29]:
    port Q[29] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[29] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [28]:
    port Q[28] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[28] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [27]:
    port Q[27] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[27] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [26]:
    port Q[26] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[26] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [25]:
    port Q[25] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[25] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [24]:
    port Q[24] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[24] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [23]:
    port Q[23] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[23] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [22]:
    port Q[22] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[22] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [21]:
    port Q[21] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[21] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [20]:
    port Q[20] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[20] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [19]:
    port Q[19] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[19] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [18]:
    port Q[18] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[18] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [17]:
    port Q[17] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[17] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [16]:
    port Q[16] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[16] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [15]:
    port Q[15] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[15] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [14]:
    port Q[14] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[14] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [13]:
    port Q[13] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[13] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [12]:
    port Q[12] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[12] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [11]:
    port Q[11] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[11] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [10]:
    port Q[10] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[10] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [9]:
    port Q[9] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[9] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [8]:
    port Q[8] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[8] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [7]:
    port Q[7] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[7] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [6]:
    port Q[6] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[6] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [5]:
    port Q[5] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[5] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [4]:
    port Q[4] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[4] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [3]:
    port Q[3] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[3] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [2]:
    port Q[2] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[2] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [1]:
    port Q[1] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[1] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketdelta [0]:
    port Q[0] of cell $auto$proc_dlatch.cc:408:proc_dlatch$861 ($dlatch)
    port Q[0] of cell $procdff$869 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketcount [7]:
    port Q[7] of cell $auto$proc_dlatch.cc:408:proc_dlatch$668 ($dlatch)
    port Q[7] of cell $procdff$868 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketcount [6]:
    port Q[6] of cell $auto$proc_dlatch.cc:408:proc_dlatch$668 ($dlatch)
    port Q[6] of cell $procdff$868 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketcount [5]:
    port Q[5] of cell $auto$proc_dlatch.cc:408:proc_dlatch$668 ($dlatch)
    port Q[5] of cell $procdff$868 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketcount [4]:
    port Q[4] of cell $auto$proc_dlatch.cc:408:proc_dlatch$668 ($dlatch)
    port Q[4] of cell $procdff$868 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketcount [3]:
    port Q[3] of cell $auto$proc_dlatch.cc:408:proc_dlatch$668 ($dlatch)
    port Q[3] of cell $procdff$868 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketcount [2]:
    port Q[2] of cell $auto$proc_dlatch.cc:408:proc_dlatch$668 ($dlatch)
    port Q[2] of cell $procdff$868 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketcount [1]:
    port Q[1] of cell $auto$proc_dlatch.cc:408:proc_dlatch$668 ($dlatch)
    port Q[1] of cell $procdff$868 ($dff)
Warning: multiple conflicting drivers for OPC.\bracketcount [0]:
    port Q[0] of cell $auto$proc_dlatch.cc:408:proc_dlatch$668 ($dlatch)
    port Q[0] of cell $procdff$868 ($dff)
found and reported 40 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BFCPU'.
Finding identical cells in module `\DC'.
Finding identical cells in module `\DPC'.
Finding identical cells in module `\OPC'.
  Cell `$auto$proc_dlatch.cc:238:make_hold$675' is identical to cell `$auto$proc_dlatch.cc:238:make_hold$673'.
    Redirecting output \Y: $auto$rtlil.cc:1600:Not$676 = $auto$rtlil.cc:1600:Not$674
    Removing $not cell `$auto$proc_dlatch.cc:238:make_hold$675' from module `\OPC'.
  Cell `$auto$proc_dlatch.cc:238:make_hold$679' is identical to cell `$auto$proc_dlatch.cc:238:make_hold$673'.
    Redirecting output \Y: $auto$rtlil.cc:1600:Not$680 = $auto$rtlil.cc:1600:Not$674
    Removing $not cell `$auto$proc_dlatch.cc:238:make_hold$679' from module `\OPC'.
  Cell `$auto$proc_dlatch.cc:238:make_hold$741' is identical to cell `$auto$proc_dlatch.cc:238:make_hold$739'.
    Redirecting output \Y: $auto$rtlil.cc:1600:Not$742 = $auto$rtlil.cc:1600:Not$740
    Removing $not cell `$auto$proc_dlatch.cc:238:make_hold$741' from module `\OPC'.
  Cell `$auto$proc_dlatch.cc:238:make_hold$745' is identical to cell `$auto$proc_dlatch.cc:238:make_hold$739'.
    Redirecting output \Y: $auto$rtlil.cc:1600:Not$746 = $auto$rtlil.cc:1600:Not$740
    Removing $not cell `$auto$proc_dlatch.cc:238:make_hold$745' from module `\OPC'.
  Cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:312$18' is identical to cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14'.
    Redirecting output \Y: $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:312$18_Y = $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14_Y
    Removing $eq cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:312$18' from module `\OPC'.
  Cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:319$19' is identical to cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17'.
    Redirecting output \Y: $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:319$19_Y = $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17_Y
    Removing $eq cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:319$19' from module `\OPC'.
  Cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:319$20' is identical to cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$15'.
    Redirecting output \Y: $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:319$20_Y = $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$15_Y
    Removing $logic_not cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:319$20' from module `\OPC'.
  Cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:325$22' is identical to cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14'.
    Redirecting output \Y: $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:325$22_Y = $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14_Y
    Removing $eq cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:325$22' from module `\OPC'.
  Cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:327$23' is identical to cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17'.
    Redirecting output \Y: $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:327$23_Y = $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17_Y
    Removing $eq cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:327$23' from module `\OPC'.
  Cell `$procmux$114_CMP0' is identical to cell `$procmux$108_CMP0'.
    Redirecting output \Y: $procmux$114_CMP = $procmux$108_CMP
    Removing $eq cell `$procmux$114_CMP0' from module `\OPC'.
  Cell `$procmux$120_CMP0' is identical to cell `$procmux$108_CMP0'.
    Redirecting output \Y: $procmux$120_CMP = $procmux$108_CMP
    Removing $eq cell `$procmux$120_CMP0' from module `\OPC'.
  Cell `$procmux$126_CMP0' is identical to cell `$procmux$108_CMP0'.
    Redirecting output \Y: $procmux$126_CMP = $procmux$108_CMP
    Removing $eq cell `$procmux$126_CMP0' from module `\OPC'.
  Cell `$procmux$146_CMP0' is identical to cell `$procmux$136_CMP0'.
    Redirecting output \Y: $procmux$146_CMP = $procmux$136_CMP
    Removing $eq cell `$procmux$146_CMP0' from module `\OPC'.
  Cell `$procmux$152_CMP0' is identical to cell `$procmux$136_CMP0'.
    Redirecting output \Y: $procmux$152_CMP = $procmux$136_CMP
    Removing $eq cell `$procmux$152_CMP0' from module `\OPC'.
  Cell `$procmux$159_CMP0' is identical to cell `$procmux$136_CMP0'.
    Redirecting output \Y: $procmux$159_CMP = $procmux$136_CMP
    Removing $eq cell `$procmux$159_CMP0' from module `\OPC'.
  Cell `$procmux$166_CMP0' is identical to cell `$procmux$136_CMP0'.
    Redirecting output \Y: $procmux$166_CMP = $procmux$136_CMP
    Removing $eq cell `$procmux$166_CMP0' from module `\OPC'.
  Cell `$procmux$182_CMP0' is identical to cell `$procmux$174_CMP0'.
    Redirecting output \Y: $procmux$182_CMP = $procmux$174_CMP
    Removing $eq cell `$procmux$182_CMP0' from module `\OPC'.
  Cell `$procmux$190_CMP0' is identical to cell `$procmux$174_CMP0'.
    Redirecting output \Y: $procmux$190_CMP = $procmux$174_CMP
    Removing $eq cell `$procmux$190_CMP0' from module `\OPC'.
  Cell `$procmux$208_CMP0' is identical to cell `$procmux$199_CMP0'.
    Redirecting output \Y: $procmux$208_CMP = $procmux$199_CMP
    Removing $eq cell `$procmux$208_CMP0' from module `\OPC'.
  Cell `$procmux$217_CMP0' is identical to cell `$procmux$199_CMP0'.
    Redirecting output \Y: $procmux$217_CMP = $procmux$199_CMP
    Removing $eq cell `$procmux$217_CMP0' from module `\OPC'.
  Cell `$procmux$236_CMP0' is identical to cell `$procmux$226_CMP0'.
    Redirecting output \Y: $procmux$236_CMP = $procmux$226_CMP
    Removing $eq cell `$procmux$236_CMP0' from module `\OPC'.
  Cell `$procmux$258_CMP0' is identical to cell `$procmux$247_CMP0'.
    Redirecting output \Y: $procmux$258_CMP = $procmux$247_CMP
    Removing $eq cell `$procmux$258_CMP0' from module `\OPC'.
  Cell `$procmux$288_CMP0' is identical to cell `$procmux$271_CMP0'.
    Redirecting output \Y: $procmux$288_CMP = $procmux$271_CMP
    Removing $eq cell `$procmux$288_CMP0' from module `\OPC'.
  Cell `$procmux$289_CMP0' is identical to cell `$procmux$272_CMP0'.
    Redirecting output \Y: $procmux$289_CMP = $procmux$272_CMP
    Removing $eq cell `$procmux$289_CMP0' from module `\OPC'.
  Cell `$procmux$290_CMP0' is identical to cell `$procmux$273_CMP0'.
    Redirecting output \Y: $procmux$290_CMP = $procmux$273_CMP
    Removing $logic_not cell `$procmux$290_CMP0' from module `\OPC'.
  Cell `$procmux$292_CMP0' is identical to cell `$procmux$275_CMP0'.
    Redirecting output \Y: $procmux$292_CMP = $procmux$275_CMP
    Removing $eq cell `$procmux$292_CMP0' from module `\OPC'.
  Cell `$procmux$306_CMP0' is identical to cell `$procmux$271_CMP0'.
    Redirecting output \Y: $procmux$306_CMP = $procmux$271_CMP
    Removing $eq cell `$procmux$306_CMP0' from module `\OPC'.
  Cell `$procmux$307_CMP0' is identical to cell `$procmux$272_CMP0'.
    Redirecting output \Y: $procmux$307_CMP = $procmux$272_CMP
    Removing $eq cell `$procmux$307_CMP0' from module `\OPC'.
  Cell `$procmux$308_CMP0' is identical to cell `$procmux$273_CMP0'.
    Redirecting output \Y: $procmux$308_CMP = $procmux$273_CMP
    Removing $logic_not cell `$procmux$308_CMP0' from module `\OPC'.
  Cell `$procmux$324_CMP0' is identical to cell `$procmux$271_CMP0'.
    Redirecting output \Y: $procmux$324_CMP = $procmux$271_CMP
    Removing $eq cell `$procmux$324_CMP0' from module `\OPC'.
  Cell `$procmux$325_CMP0' is identical to cell `$procmux$272_CMP0'.
    Redirecting output \Y: $procmux$325_CMP = $procmux$272_CMP
    Removing $eq cell `$procmux$325_CMP0' from module `\OPC'.
  Cell `$procmux$326_CMP0' is identical to cell `$procmux$273_CMP0'.
    Redirecting output \Y: $procmux$326_CMP = $procmux$273_CMP
    Removing $logic_not cell `$procmux$326_CMP0' from module `\OPC'.
  Cell `$procmux$328_CMP0' is identical to cell `$procmux$310_CMP0'.
    Redirecting output \Y: $procmux$328_CMP = $procmux$310_CMP
    Removing $logic_not cell `$procmux$328_CMP0' from module `\OPC'.
  Cell `$procmux$343_CMP0' is identical to cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14'.
    Redirecting output \Y: $procmux$343_CMP = $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14_Y
    Removing $eq cell `$procmux$343_CMP0' from module `\OPC'.
  Cell `$procmux$344_CMP0' is identical to cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17'.
    Redirecting output \Y: $procmux$344_CMP = $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17_Y
    Removing $eq cell `$procmux$344_CMP0' from module `\OPC'.
  Cell `$procmux$345_CMP0' is identical to cell `$procmux$272_CMP0'.
    Redirecting output \Y: $procmux$345_CMP = $procmux$272_CMP
    Removing $eq cell `$procmux$345_CMP0' from module `\OPC'.
  Cell `$procmux$346_CMP0' is identical to cell `$procmux$273_CMP0'.
    Redirecting output \Y: $procmux$346_CMP = $procmux$273_CMP
    Removing $logic_not cell `$procmux$346_CMP0' from module `\OPC'.
  Cell `$procmux$363_CMP0' is identical to cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14'.
    Redirecting output \Y: $procmux$363_CMP = $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14_Y
    Removing $eq cell `$procmux$363_CMP0' from module `\OPC'.
  Cell `$procmux$364_CMP0' is identical to cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17'.
    Redirecting output \Y: $procmux$364_CMP = $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17_Y
    Removing $eq cell `$procmux$364_CMP0' from module `\OPC'.
  Cell `$procmux$365_CMP0' is identical to cell `$procmux$272_CMP0'.
    Redirecting output \Y: $procmux$365_CMP = $procmux$272_CMP
    Removing $eq cell `$procmux$365_CMP0' from module `\OPC'.
  Cell `$procmux$366_CMP0' is identical to cell `$procmux$273_CMP0'.
    Redirecting output \Y: $procmux$366_CMP = $procmux$273_CMP
    Removing $logic_not cell `$procmux$366_CMP0' from module `\OPC'.
  Cell `$procmux$368_CMP0' is identical to cell `$procmux$348_CMP0'.
    Redirecting output \Y: $procmux$368_CMP = $procmux$348_CMP
    Removing $eq cell `$procmux$368_CMP0' from module `\OPC'.
  Cell `$procmux$384_CMP0' is identical to cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14'.
    Redirecting output \Y: $procmux$384_CMP = $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14_Y
    Removing $eq cell `$procmux$384_CMP0' from module `\OPC'.
  Cell `$procmux$385_CMP0' is identical to cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17'.
    Redirecting output \Y: $procmux$385_CMP = $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17_Y
    Removing $eq cell `$procmux$385_CMP0' from module `\OPC'.
  Cell `$procmux$386_CMP0' is identical to cell `$procmux$272_CMP0'.
    Redirecting output \Y: $procmux$386_CMP = $procmux$272_CMP
    Removing $eq cell `$procmux$386_CMP0' from module `\OPC'.
  Cell `$procmux$387_CMP0' is identical to cell `$procmux$273_CMP0'.
    Redirecting output \Y: $procmux$387_CMP = $procmux$273_CMP
    Removing $logic_not cell `$procmux$387_CMP0' from module `\OPC'.
  Cell `$procmux$405_CMP0' is identical to cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14'.
    Redirecting output \Y: $procmux$405_CMP = $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14_Y
    Removing $eq cell `$procmux$405_CMP0' from module `\OPC'.
  Cell `$procmux$406_CMP0' is identical to cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17'.
    Redirecting output \Y: $procmux$406_CMP = $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17_Y
    Removing $eq cell `$procmux$406_CMP0' from module `\OPC'.
  Cell `$procmux$407_CMP0' is identical to cell `$procmux$272_CMP0'.
    Redirecting output \Y: $procmux$407_CMP = $procmux$272_CMP
    Removing $eq cell `$procmux$407_CMP0' from module `\OPC'.
  Cell `$procmux$408_CMP0' is identical to cell `$procmux$273_CMP0'.
    Redirecting output \Y: $procmux$408_CMP = $procmux$273_CMP
    Removing $logic_not cell `$procmux$408_CMP0' from module `\OPC'.
  Cell `$procmux$410_CMP0' is identical to cell `$procmux$389_CMP0'.
    Redirecting output \Y: $procmux$410_CMP = $procmux$389_CMP
    Removing $eq cell `$procmux$410_CMP0' from module `\OPC'.
  Cell `$procmux$427_CMP0' is identical to cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14'.
    Redirecting output \Y: $procmux$427_CMP = $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14_Y
    Removing $eq cell `$procmux$427_CMP0' from module `\OPC'.
  Cell `$procmux$428_CMP0' is identical to cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17'.
    Redirecting output \Y: $procmux$428_CMP = $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17_Y
    Removing $eq cell `$procmux$428_CMP0' from module `\OPC'.
  Cell `$procmux$429_CMP0' is identical to cell `$procmux$272_CMP0'.
    Redirecting output \Y: $procmux$429_CMP = $procmux$272_CMP
    Removing $eq cell `$procmux$429_CMP0' from module `\OPC'.
  Cell `$procmux$430_CMP0' is identical to cell `$procmux$273_CMP0'.
    Redirecting output \Y: $procmux$430_CMP = $procmux$273_CMP
    Removing $logic_not cell `$procmux$430_CMP0' from module `\OPC'.
  Cell `$procmux$449_CMP0' is identical to cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14'.
    Redirecting output \Y: $procmux$449_CMP = $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14_Y
    Removing $eq cell `$procmux$449_CMP0' from module `\OPC'.
  Cell `$procmux$450_CMP0' is identical to cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17'.
    Redirecting output \Y: $procmux$450_CMP = $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17_Y
    Removing $eq cell `$procmux$450_CMP0' from module `\OPC'.
  Cell `$procmux$451_CMP0' is identical to cell `$procmux$272_CMP0'.
    Redirecting output \Y: $procmux$451_CMP = $procmux$272_CMP
    Removing $eq cell `$procmux$451_CMP0' from module `\OPC'.
  Cell `$procmux$452_CMP0' is identical to cell `$procmux$273_CMP0'.
    Redirecting output \Y: $procmux$452_CMP = $procmux$273_CMP
    Removing $logic_not cell `$procmux$452_CMP0' from module `\OPC'.
  Cell `$procmux$454_CMP0' is identical to cell `$procmux$432_CMP0'.
    Redirecting output \Y: $procmux$454_CMP = $procmux$432_CMP
    Removing $eq cell `$procmux$454_CMP0' from module `\OPC'.
  Cell `$procmux$472_CMP0' is identical to cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14'.
    Redirecting output \Y: $procmux$472_CMP = $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14_Y
    Removing $eq cell `$procmux$472_CMP0' from module `\OPC'.
  Cell `$procmux$473_CMP0' is identical to cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17'.
    Redirecting output \Y: $procmux$473_CMP = $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17_Y
    Removing $eq cell `$procmux$473_CMP0' from module `\OPC'.
  Cell `$procmux$474_CMP0' is identical to cell `$procmux$272_CMP0'.
    Redirecting output \Y: $procmux$474_CMP = $procmux$272_CMP
    Removing $eq cell `$procmux$474_CMP0' from module `\OPC'.
  Cell `$procmux$475_CMP0' is identical to cell `$procmux$273_CMP0'.
    Redirecting output \Y: $procmux$475_CMP = $procmux$273_CMP
    Removing $logic_not cell `$procmux$475_CMP0' from module `\OPC'.
  Cell `$procmux$495_CMP0' is identical to cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14'.
    Redirecting output \Y: $procmux$495_CMP = $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14_Y
    Removing $eq cell `$procmux$495_CMP0' from module `\OPC'.
  Cell `$procmux$496_CMP0' is identical to cell `$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17'.
    Redirecting output \Y: $procmux$496_CMP = $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17_Y
    Removing $eq cell `$procmux$496_CMP0' from module `\OPC'.
  Cell `$procmux$497_CMP0' is identical to cell `$procmux$272_CMP0'.
    Redirecting output \Y: $procmux$497_CMP = $procmux$272_CMP
    Removing $eq cell `$procmux$497_CMP0' from module `\OPC'.
  Cell `$procmux$498_CMP0' is identical to cell `$procmux$273_CMP0'.
    Redirecting output \Y: $procmux$498_CMP = $procmux$273_CMP
    Removing $logic_not cell `$procmux$498_CMP0' from module `\OPC'.
  Cell `$procmux$500_CMP0' is identical to cell `$procmux$477_CMP0'.
    Redirecting output \Y: $procmux$500_CMP = $procmux$477_CMP
    Removing $eq cell `$procmux$500_CMP0' from module `\OPC'.
  Cell `$procmux$503_CMP0' is identical to cell `$procmux$108_CMP0'.
    Redirecting output \Y: $procmux$503_CMP = $procmux$108_CMP
    Removing $eq cell `$procmux$503_CMP0' from module `\OPC'.
  Cell `$procmux$504_CMP0' is identical to cell `$procmux$136_CMP0'.
    Redirecting output \Y: $procmux$504_CMP = $procmux$136_CMP
    Removing $eq cell `$procmux$504_CMP0' from module `\OPC'.
  Cell `$procmux$505_CMP0' is identical to cell `$procmux$174_CMP0'.
    Redirecting output \Y: $procmux$505_CMP = $procmux$174_CMP
    Removing $eq cell `$procmux$505_CMP0' from module `\OPC'.
  Cell `$procmux$506_CMP0' is identical to cell `$procmux$199_CMP0'.
    Redirecting output \Y: $procmux$506_CMP = $procmux$199_CMP
    Removing $eq cell `$procmux$506_CMP0' from module `\OPC'.
  Cell `$procmux$507_CMP0' is identical to cell `$procmux$226_CMP0'.
    Redirecting output \Y: $procmux$507_CMP = $procmux$226_CMP
    Removing $eq cell `$procmux$507_CMP0' from module `\OPC'.
  Cell `$procmux$508_CMP0' is identical to cell `$procmux$247_CMP0'.
    Redirecting output \Y: $procmux$508_CMP = $procmux$247_CMP
    Removing $eq cell `$procmux$508_CMP0' from module `\OPC'.
  Cell `$procmux$512_CMP0' is identical to cell `$procmux$275_CMP0'.
    Redirecting output \Y: $procmux$512_CMP = $procmux$275_CMP
    Removing $eq cell `$procmux$512_CMP0' from module `\OPC'.
  Cell `$procmux$513_CMP0' is identical to cell `$procmux$310_CMP0'.
    Redirecting output \Y: $procmux$513_CMP = $procmux$310_CMP
    Removing $logic_not cell `$procmux$513_CMP0' from module `\OPC'.
  Cell `$procmux$514_CMP0' is identical to cell `$procmux$348_CMP0'.
    Redirecting output \Y: $procmux$514_CMP = $procmux$348_CMP
    Removing $eq cell `$procmux$514_CMP0' from module `\OPC'.
  Cell `$procmux$515_CMP0' is identical to cell `$procmux$389_CMP0'.
    Redirecting output \Y: $procmux$515_CMP = $procmux$389_CMP
    Removing $eq cell `$procmux$515_CMP0' from module `\OPC'.
  Cell `$procmux$516_CMP0' is identical to cell `$procmux$432_CMP0'.
    Redirecting output \Y: $procmux$516_CMP = $procmux$432_CMP
    Removing $eq cell `$procmux$516_CMP0' from module `\OPC'.
  Cell `$procmux$517_CMP0' is identical to cell `$procmux$477_CMP0'.
    Redirecting output \Y: $procmux$517_CMP = $procmux$477_CMP
    Removing $eq cell `$procmux$517_CMP0' from module `\OPC'.
  Cell `$procmux$519_CMP0' is identical to cell `$procmux$502_CMP0'.
    Redirecting output \Y: $procmux$519_CMP = $procmux$502_CMP
    Removing $eq cell `$procmux$519_CMP0' from module `\OPC'.
  Cell `$procmux$520_CMP0' is identical to cell `$procmux$108_CMP0'.
    Redirecting output \Y: $procmux$520_CMP = $procmux$108_CMP
    Removing $eq cell `$procmux$520_CMP0' from module `\OPC'.
  Cell `$procmux$521_CMP0' is identical to cell `$procmux$136_CMP0'.
    Redirecting output \Y: $procmux$521_CMP = $procmux$136_CMP
    Removing $eq cell `$procmux$521_CMP0' from module `\OPC'.
  Cell `$procmux$522_CMP0' is identical to cell `$procmux$174_CMP0'.
    Redirecting output \Y: $procmux$522_CMP = $procmux$174_CMP
    Removing $eq cell `$procmux$522_CMP0' from module `\OPC'.
  Cell `$procmux$523_CMP0' is identical to cell `$procmux$199_CMP0'.
    Redirecting output \Y: $procmux$523_CMP = $procmux$199_CMP
    Removing $eq cell `$procmux$523_CMP0' from module `\OPC'.
  Cell `$procmux$524_CMP0' is identical to cell `$procmux$226_CMP0'.
    Redirecting output \Y: $procmux$524_CMP = $procmux$226_CMP
    Removing $eq cell `$procmux$524_CMP0' from module `\OPC'.
  Cell `$procmux$525_CMP0' is identical to cell `$procmux$247_CMP0'.
    Redirecting output \Y: $procmux$525_CMP = $procmux$247_CMP
    Removing $eq cell `$procmux$525_CMP0' from module `\OPC'.
  Cell `$procmux$526_CMP0' is identical to cell `$procmux$509_CMP0'.
    Redirecting output \Y: $procmux$526_CMP = $procmux$509_CMP
    Removing $eq cell `$procmux$526_CMP0' from module `\OPC'.
  Cell `$procmux$527_CMP0' is identical to cell `$procmux$510_CMP0'.
    Redirecting output \Y: $procmux$527_CMP = $procmux$510_CMP
    Removing $eq cell `$procmux$527_CMP0' from module `\OPC'.
  Cell `$procmux$528_CMP0' is identical to cell `$procmux$511_CMP0'.
    Redirecting output \Y: $procmux$528_CMP = $procmux$511_CMP
    Removing $eq cell `$procmux$528_CMP0' from module `\OPC'.
  Cell `$procmux$529_CMP0' is identical to cell `$procmux$275_CMP0'.
    Redirecting output \Y: $procmux$529_CMP = $procmux$275_CMP
    Removing $eq cell `$procmux$529_CMP0' from module `\OPC'.
  Cell `$procmux$530_CMP0' is identical to cell `$procmux$310_CMP0'.
    Redirecting output \Y: $procmux$530_CMP = $procmux$310_CMP
    Removing $logic_not cell `$procmux$530_CMP0' from module `\OPC'.
  Cell `$procmux$531_CMP0' is identical to cell `$procmux$348_CMP0'.
    Redirecting output \Y: $procmux$531_CMP = $procmux$348_CMP
    Removing $eq cell `$procmux$531_CMP0' from module `\OPC'.
  Cell `$procmux$532_CMP0' is identical to cell `$procmux$389_CMP0'.
    Redirecting output \Y: $procmux$532_CMP = $procmux$389_CMP
    Removing $eq cell `$procmux$532_CMP0' from module `\OPC'.
  Cell `$procmux$533_CMP0' is identical to cell `$procmux$432_CMP0'.
    Redirecting output \Y: $procmux$533_CMP = $procmux$432_CMP
    Removing $eq cell `$procmux$533_CMP0' from module `\OPC'.
  Cell `$procmux$534_CMP0' is identical to cell `$procmux$477_CMP0'.
    Redirecting output \Y: $procmux$534_CMP = $procmux$477_CMP
    Removing $eq cell `$procmux$534_CMP0' from module `\OPC'.
  Cell `$procmux$536_CMP0' is identical to cell `$procmux$502_CMP0'.
    Redirecting output \Y: $procmux$536_CMP = $procmux$502_CMP
    Removing $eq cell `$procmux$536_CMP0' from module `\OPC'.
  Cell `$procmux$537_CMP0' is identical to cell `$procmux$108_CMP0'.
    Redirecting output \Y: $procmux$537_CMP = $procmux$108_CMP
    Removing $eq cell `$procmux$537_CMP0' from module `\OPC'.
  Cell `$procmux$538_CMP0' is identical to cell `$procmux$136_CMP0'.
    Redirecting output \Y: $procmux$538_CMP = $procmux$136_CMP
    Removing $eq cell `$procmux$538_CMP0' from module `\OPC'.
  Cell `$procmux$539_CMP0' is identical to cell `$procmux$174_CMP0'.
    Redirecting output \Y: $procmux$539_CMP = $procmux$174_CMP
    Removing $eq cell `$procmux$539_CMP0' from module `\OPC'.
  Cell `$procmux$540_CMP0' is identical to cell `$procmux$199_CMP0'.
    Redirecting output \Y: $procmux$540_CMP = $procmux$199_CMP
    Removing $eq cell `$procmux$540_CMP0' from module `\OPC'.
  Cell `$procmux$541_CMP0' is identical to cell `$procmux$226_CMP0'.
    Redirecting output \Y: $procmux$541_CMP = $procmux$226_CMP
    Removing $eq cell `$procmux$541_CMP0' from module `\OPC'.
  Cell `$procmux$542_CMP0' is identical to cell `$procmux$247_CMP0'.
    Redirecting output \Y: $procmux$542_CMP = $procmux$247_CMP
    Removing $eq cell `$procmux$542_CMP0' from module `\OPC'.
  Cell `$procmux$543_CMP0' is identical to cell `$procmux$509_CMP0'.
    Redirecting output \Y: $procmux$543_CMP = $procmux$509_CMP
    Removing $eq cell `$procmux$543_CMP0' from module `\OPC'.
  Cell `$procmux$544_CMP0' is identical to cell `$procmux$510_CMP0'.
    Redirecting output \Y: $procmux$544_CMP = $procmux$510_CMP
    Removing $eq cell `$procmux$544_CMP0' from module `\OPC'.
  Cell `$procmux$545_CMP0' is identical to cell `$procmux$511_CMP0'.
    Redirecting output \Y: $procmux$545_CMP = $procmux$511_CMP
    Removing $eq cell `$procmux$545_CMP0' from module `\OPC'.
  Cell `$procmux$546_CMP0' is identical to cell `$procmux$275_CMP0'.
    Redirecting output \Y: $procmux$546_CMP = $procmux$275_CMP
    Removing $eq cell `$procmux$546_CMP0' from module `\OPC'.
  Cell `$procmux$547_CMP0' is identical to cell `$procmux$310_CMP0'.
    Redirecting output \Y: $procmux$547_CMP = $procmux$310_CMP
    Removing $logic_not cell `$procmux$547_CMP0' from module `\OPC'.
  Cell `$procmux$548_CMP0' is identical to cell `$procmux$348_CMP0'.
    Redirecting output \Y: $procmux$548_CMP = $procmux$348_CMP
    Removing $eq cell `$procmux$548_CMP0' from module `\OPC'.
  Cell `$procmux$549_CMP0' is identical to cell `$procmux$389_CMP0'.
    Redirecting output \Y: $procmux$549_CMP = $procmux$389_CMP
    Removing $eq cell `$procmux$549_CMP0' from module `\OPC'.
  Cell `$procmux$550_CMP0' is identical to cell `$procmux$432_CMP0'.
    Redirecting output \Y: $procmux$550_CMP = $procmux$432_CMP
    Removing $eq cell `$procmux$550_CMP0' from module `\OPC'.
  Cell `$procmux$551_CMP0' is identical to cell `$procmux$477_CMP0'.
    Redirecting output \Y: $procmux$551_CMP = $procmux$477_CMP
    Removing $eq cell `$procmux$551_CMP0' from module `\OPC'.
  Cell `$procmux$553_CMP0' is identical to cell `$procmux$502_CMP0'.
    Redirecting output \Y: $procmux$553_CMP = $procmux$502_CMP
    Removing $eq cell `$procmux$553_CMP0' from module `\OPC'.
  Cell `$procmux$554_CMP0' is identical to cell `$procmux$108_CMP0'.
    Redirecting output \Y: $procmux$554_CMP = $procmux$108_CMP
    Removing $eq cell `$procmux$554_CMP0' from module `\OPC'.
  Cell `$procmux$555_CMP0' is identical to cell `$procmux$136_CMP0'.
    Redirecting output \Y: $procmux$555_CMP = $procmux$136_CMP
    Removing $eq cell `$procmux$555_CMP0' from module `\OPC'.
  Cell `$procmux$556_CMP0' is identical to cell `$procmux$174_CMP0'.
    Redirecting output \Y: $procmux$556_CMP = $procmux$174_CMP
    Removing $eq cell `$procmux$556_CMP0' from module `\OPC'.
  Cell `$procmux$557_CMP0' is identical to cell `$procmux$199_CMP0'.
    Redirecting output \Y: $procmux$557_CMP = $procmux$199_CMP
    Removing $eq cell `$procmux$557_CMP0' from module `\OPC'.
  Cell `$procmux$558_CMP0' is identical to cell `$procmux$226_CMP0'.
    Redirecting output \Y: $procmux$558_CMP = $procmux$226_CMP
    Removing $eq cell `$procmux$558_CMP0' from module `\OPC'.
  Cell `$procmux$559_CMP0' is identical to cell `$procmux$247_CMP0'.
    Redirecting output \Y: $procmux$559_CMP = $procmux$247_CMP
    Removing $eq cell `$procmux$559_CMP0' from module `\OPC'.
  Cell `$procmux$560_CMP0' is identical to cell `$procmux$509_CMP0'.
    Redirecting output \Y: $procmux$560_CMP = $procmux$509_CMP
    Removing $eq cell `$procmux$560_CMP0' from module `\OPC'.
  Cell `$procmux$561_CMP0' is identical to cell `$procmux$510_CMP0'.
    Redirecting output \Y: $procmux$561_CMP = $procmux$510_CMP
    Removing $eq cell `$procmux$561_CMP0' from module `\OPC'.
  Cell `$procmux$562_CMP0' is identical to cell `$procmux$511_CMP0'.
    Redirecting output \Y: $procmux$562_CMP = $procmux$511_CMP
    Removing $eq cell `$procmux$562_CMP0' from module `\OPC'.
  Cell `$procmux$563_CMP0' is identical to cell `$procmux$275_CMP0'.
    Redirecting output \Y: $procmux$563_CMP = $procmux$275_CMP
    Removing $eq cell `$procmux$563_CMP0' from module `\OPC'.
  Cell `$procmux$564_CMP0' is identical to cell `$procmux$310_CMP0'.
    Redirecting output \Y: $procmux$564_CMP = $procmux$310_CMP
    Removing $logic_not cell `$procmux$564_CMP0' from module `\OPC'.
  Cell `$procmux$565_CMP0' is identical to cell `$procmux$348_CMP0'.
    Redirecting output \Y: $procmux$565_CMP = $procmux$348_CMP
    Removing $eq cell `$procmux$565_CMP0' from module `\OPC'.
  Cell `$procmux$566_CMP0' is identical to cell `$procmux$389_CMP0'.
    Redirecting output \Y: $procmux$566_CMP = $procmux$389_CMP
    Removing $eq cell `$procmux$566_CMP0' from module `\OPC'.
  Cell `$procmux$567_CMP0' is identical to cell `$procmux$432_CMP0'.
    Redirecting output \Y: $procmux$567_CMP = $procmux$432_CMP
    Removing $eq cell `$procmux$567_CMP0' from module `\OPC'.
  Cell `$procmux$568_CMP0' is identical to cell `$procmux$477_CMP0'.
    Redirecting output \Y: $procmux$568_CMP = $procmux$477_CMP
    Removing $eq cell `$procmux$568_CMP0' from module `\OPC'.
  Cell `$procmux$99_CMP0' is identical to cell `$procmux$108_CMP0'.
    Redirecting output \Y: $procmux$99_CMP = $procmux$108_CMP
    Removing $eq cell `$procmux$99_CMP0' from module `\OPC'.
  Cell `$auto$proc_dlatch.cc:251:make_hold$815' is identical to cell `$auto$proc_dlatch.cc:251:make_hold$622'.
    Redirecting output \Y: $auto$rtlil.cc:1629:And$816 = $auto$rtlil.cc:1629:And$623
    Removing $and cell `$auto$proc_dlatch.cc:251:make_hold$815' from module `\OPC'.
  Cell `$auto$proc_dlatch.cc:251:make_hold$819' is identical to cell `$auto$proc_dlatch.cc:251:make_hold$626'.
    Redirecting output \Y: $auto$rtlil.cc:1629:And$820 = $auto$rtlil.cc:1629:And$627
    Removing $and cell `$auto$proc_dlatch.cc:251:make_hold$819' from module `\OPC'.
  Cell `$auto$proc_dlatch.cc:251:make_hold$823' is identical to cell `$auto$proc_dlatch.cc:251:make_hold$630'.
    Redirecting output \Y: $auto$rtlil.cc:1629:And$824 = $auto$rtlil.cc:1629:And$631
    Removing $and cell `$auto$proc_dlatch.cc:251:make_hold$823' from module `\OPC'.
  Cell `$auto$proc_dlatch.cc:251:make_hold$827' is identical to cell `$auto$proc_dlatch.cc:251:make_hold$634'.
    Redirecting output \Y: $auto$rtlil.cc:1629:And$828 = $auto$rtlil.cc:1629:And$635
    Removing $and cell `$auto$proc_dlatch.cc:251:make_hold$827' from module `\OPC'.
  Cell `$auto$proc_dlatch.cc:251:make_hold$831' is identical to cell `$auto$proc_dlatch.cc:251:make_hold$638'.
    Redirecting output \Y: $auto$rtlil.cc:1629:And$832 = $auto$rtlil.cc:1629:And$639
    Removing $and cell `$auto$proc_dlatch.cc:251:make_hold$831' from module `\OPC'.
  Cell `$auto$proc_dlatch.cc:251:make_hold$835' is identical to cell `$auto$proc_dlatch.cc:251:make_hold$642'.
    Redirecting output \Y: $auto$rtlil.cc:1629:And$836 = $auto$rtlil.cc:1629:And$643
    Removing $and cell `$auto$proc_dlatch.cc:251:make_hold$835' from module `\OPC'.
  Cell `$auto$proc_dlatch.cc:251:make_hold$839' is identical to cell `$auto$proc_dlatch.cc:251:make_hold$646'.
    Redirecting output \Y: $auto$rtlil.cc:1629:And$840 = $auto$rtlil.cc:1629:And$647
    Removing $and cell `$auto$proc_dlatch.cc:251:make_hold$839' from module `\OPC'.
  Cell `$auto$proc_dlatch.cc:251:make_hold$843' is identical to cell `$auto$proc_dlatch.cc:251:make_hold$650'.
    Redirecting output \Y: $auto$rtlil.cc:1629:And$844 = $auto$rtlil.cc:1629:And$651
    Removing $and cell `$auto$proc_dlatch.cc:251:make_hold$843' from module `\OPC'.
  Cell `$auto$proc_dlatch.cc:251:make_hold$847' is identical to cell `$auto$proc_dlatch.cc:251:make_hold$654'.
    Redirecting output \Y: $auto$rtlil.cc:1629:And$848 = $auto$rtlil.cc:1629:And$655
    Removing $and cell `$auto$proc_dlatch.cc:251:make_hold$847' from module `\OPC'.
  Cell `$auto$proc_dlatch.cc:251:make_hold$851' is identical to cell `$auto$proc_dlatch.cc:251:make_hold$658'.
    Redirecting output \Y: $auto$rtlil.cc:1629:And$852 = $auto$rtlil.cc:1629:And$659
    Removing $and cell `$auto$proc_dlatch.cc:251:make_hold$851' from module `\OPC'.
  Cell `$auto$proc_dlatch.cc:251:make_hold$855' is identical to cell `$auto$proc_dlatch.cc:251:make_hold$662'.
    Redirecting output \Y: $auto$rtlil.cc:1629:And$856 = $auto$rtlil.cc:1629:And$663
    Removing $and cell `$auto$proc_dlatch.cc:251:make_hold$855' from module `\OPC'.
  Cell `$auto$proc_dlatch.cc:238:make_hold$743' is identical to cell `$auto$proc_dlatch.cc:238:make_hold$681'.
    Redirecting output \Y: $auto$rtlil.cc:1600:Not$744 = $auto$rtlil.cc:1600:Not$682
    Removing $not cell `$auto$proc_dlatch.cc:238:make_hold$743' from module `\OPC'.
  Cell `$auto$proc_dlatch.cc:238:make_hold$747' is identical to cell `$auto$proc_dlatch.cc:238:make_hold$677'.
    Redirecting output \Y: $auto$rtlil.cc:1600:Not$748 = $auto$rtlil.cc:1600:Not$678
    Removing $not cell `$auto$proc_dlatch.cc:238:make_hold$747' from module `\OPC'.
  Cell `$auto$proc_dlatch.cc:251:make_hold$574' is identical to cell `$auto$proc_dlatch.cc:251:make_hold$671'.
    Redirecting output \Y: $auto$rtlil.cc:1629:And$575 = $auto$rtlil.cc:1629:And$672
    Removing $and cell `$auto$proc_dlatch.cc:251:make_hold$574' from module `\OPC'.
Removed a total of 144 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BFCPU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$570 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \DC..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$53 (pure)
    Root of a mux tree: $procmux$59 (pure)
    Root of a mux tree: $procmux$68 (pure)
    Root of a mux tree: $procmux$80 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \DPC..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$83 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \OPC..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$501 (pure)
    Root of a mux tree: $procmux$518 (pure)
    Root of a mux tree: $procmux$535 (pure)
    Root of a mux tree: $procmux$552 (pure)
    Root of a mux tree: $procmux$86 (pure)
    Root of a mux tree: $procmux$89 (pure)
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$309.
    dead port 2/2 on $mux $procmux$327.
    dead port 2/2 on $mux $procmux$347.
    dead port 2/2 on $mux $procmux$367.
    dead port 2/2 on $mux $procmux$388.
    dead port 2/2 on $mux $procmux$409.
    dead port 2/2 on $mux $procmux$431.
    dead port 2/2 on $mux $procmux$453.
    dead port 2/2 on $mux $procmux$274.
    dead port 2/2 on $mux $procmux$476.
    dead port 2/2 on $mux $procmux$499.
    dead port 2/2 on $mux $procmux$291.
    dead port 2/2 on $mux $procmux$113.
    dead port 2/2 on $mux $procmux$119.
    dead port 2/2 on $mux $procmux$151.
    dead port 2/2 on $mux $procmux$158.
    dead port 2/2 on $mux $procmux$173.
    dead port 2/2 on $mux $procmux$181.
    dead port 2/2 on $mux $procmux$198.
    dead port 2/2 on $mux $procmux$216.
    dead port 2/2 on $mux $procmux$225.
    dead port 2/2 on $mux $procmux$235.
    dead port 2/2 on $mux $procmux$246.
    dead port 2/2 on $mux $procmux$257.
Removed 24 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BFCPU.
  Optimizing cells in module \DC.
  Optimizing cells in module \DPC.
  Optimizing cells in module \OPC.
    New input vector for $reduce_or cell $auto$proc_dlatch.cc:247:make_hold$857: { $auto$rtlil.cc:1629:And$623 $auto$rtlil.cc:1629:And$627 $auto$rtlil.cc:1629:And$631 $auto$rtlil.cc:1629:And$635 $auto$rtlil.cc:1629:And$639 $auto$rtlil.cc:1629:And$643 $auto$rtlil.cc:1629:And$647 $auto$rtlil.cc:1629:And$651 $auto$rtlil.cc:1629:And$655 $auto$rtlil.cc:1629:And$659 $auto$rtlil.cc:1629:And$663 $auto$rtlil.cc:1629:And$672 $auto$rtlil.cc:1629:And$738 $auto$rtlil.cc:1629:And$804 $auto$rtlil.cc:1629:And$808 $auto$rtlil.cc:1629:And$812 }
    New input vector for $reduce_or cell $auto$proc_dlatch.cc:247:make_hold$793: { $auto$rtlil.cc:1629:And$788 $auto$rtlil.cc:1629:And$792 }
    New input vector for $reduce_or cell $auto$proc_dlatch.cc:247:make_hold$727: { $auto$rtlil.cc:1629:And$722 $auto$rtlil.cc:1629:And$726 }
    New input vector for $reduce_or cell $auto$proc_dlatch.cc:247:make_hold$664: { $auto$rtlil.cc:1629:And$579 $auto$rtlil.cc:1629:And$583 $auto$rtlil.cc:1629:And$601 $auto$rtlil.cc:1629:And$619 $auto$rtlil.cc:1629:And$623 $auto$rtlil.cc:1629:And$627 $auto$rtlil.cc:1629:And$631 $auto$rtlil.cc:1629:And$635 $auto$rtlil.cc:1629:And$639 $auto$rtlil.cc:1629:And$643 $auto$rtlil.cc:1629:And$647 $auto$rtlil.cc:1629:And$651 $auto$rtlil.cc:1629:And$655 $auto$rtlil.cc:1629:And$659 $auto$rtlil.cc:1629:And$663 $auto$rtlil.cc:1629:And$672 }
    New ctrl vector for $pmux cell $procmux$383: $auto$opt_reduce.cc:132:opt_mux$872
    New ctrl vector for $pmux cell $procmux$323: $auto$opt_reduce.cc:132:opt_mux$874
    New ctrl vector for $pmux cell $procmux$404: $auto$opt_reduce.cc:132:opt_mux$876
    New ctrl vector for $pmux cell $procmux$426: $auto$opt_reduce.cc:132:opt_mux$878
    New ctrl vector for $pmux cell $procmux$448: $auto$opt_reduce.cc:132:opt_mux$880
    New ctrl vector for $pmux cell $procmux$270: $auto$opt_reduce.cc:132:opt_mux$882
    New ctrl vector for $pmux cell $procmux$471: $auto$opt_reduce.cc:132:opt_mux$884
    New ctrl vector for $pmux cell $procmux$494: $auto$opt_reduce.cc:132:opt_mux$886
    New ctrl vector for $pmux cell $procmux$287: $auto$opt_reduce.cc:132:opt_mux$888
    New ctrl vector for $pmux cell $procmux$342: $auto$opt_reduce.cc:132:opt_mux$890
    New ctrl vector for $pmux cell $procmux$501: { $procmux$477_CMP $procmux$432_CMP $procmux$389_CMP $procmux$348_CMP $procmux$310_CMP $procmux$275_CMP $procmux$511_CMP $procmux$510_CMP $procmux$247_CMP $procmux$226_CMP $procmux$199_CMP $procmux$174_CMP $procmux$136_CMP $procmux$108_CMP $auto$opt_reduce.cc:132:opt_mux$892 }
    New ctrl vector for $pmux cell $procmux$518: { $procmux$477_CMP $procmux$432_CMP $procmux$389_CMP $procmux$348_CMP $procmux$310_CMP $procmux$275_CMP $procmux$247_CMP $auto$opt_reduce.cc:132:opt_mux$896 $procmux$199_CMP $procmux$174_CMP $procmux$108_CMP $auto$opt_reduce.cc:132:opt_mux$894 }
    New ctrl vector for $pmux cell $procmux$305: $auto$opt_reduce.cc:132:opt_mux$898
    New ctrl vector for $pmux cell $procmux$535: $procmux$108_CMP
    New ctrl vector for $pmux cell $procmux$362: $auto$opt_reduce.cc:132:opt_mux$900
    New ctrl vector for $pmux cell $procmux$552: { }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$899: { $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14_Y $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17_Y $procmux$272_CMP $procmux$273_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$871: { $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14_Y $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17_Y $procmux$272_CMP $procmux$273_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$873: { $procmux$271_CMP $procmux$272_CMP $procmux$273_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$875: { $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14_Y $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17_Y $procmux$272_CMP $procmux$273_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$877: { $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14_Y $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17_Y $procmux$272_CMP $procmux$273_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$879: { $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14_Y $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17_Y $procmux$272_CMP $procmux$273_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$881: { $procmux$271_CMP $procmux$272_CMP $procmux$273_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$883: { $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14_Y $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17_Y $procmux$272_CMP $procmux$273_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$885: { $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14_Y $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17_Y $procmux$272_CMP $procmux$273_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$887: { $procmux$271_CMP $procmux$272_CMP $procmux$273_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$889: { $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14_Y $eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17_Y $procmux$272_CMP $procmux$273_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$891: { $procmux$502_CMP $procmux$509_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$893: { $procmux$136_CMP $procmux$502_CMP $procmux$509_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$895: { $procmux$226_CMP $procmux$510_CMP $procmux$511_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$897: { $procmux$271_CMP $procmux$272_CMP $procmux$273_CMP }
  Optimizing cells in module \OPC.
Performed a total of 35 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BFCPU'.
Finding identical cells in module `\DC'.
Finding identical cells in module `\DPC'.
Finding identical cells in module `\OPC'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$887' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$897'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$888 = $auto$opt_reduce.cc:132:opt_mux$898
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$887' from module `\OPC'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$885' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$889'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$886 = $auto$opt_reduce.cc:132:opt_mux$890
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$885' from module `\OPC'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$883' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$889'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$884 = $auto$opt_reduce.cc:132:opt_mux$890
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$883' from module `\OPC'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$881' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$897'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$882 = $auto$opt_reduce.cc:132:opt_mux$898
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$881' from module `\OPC'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$879' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$889'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$880 = $auto$opt_reduce.cc:132:opt_mux$890
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$879' from module `\OPC'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$877' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$889'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$878 = $auto$opt_reduce.cc:132:opt_mux$890
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$877' from module `\OPC'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$875' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$889'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$876 = $auto$opt_reduce.cc:132:opt_mux$890
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$875' from module `\OPC'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$873' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$897'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$874 = $auto$opt_reduce.cc:132:opt_mux$898
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$873' from module `\OPC'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$871' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$889'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$872 = $auto$opt_reduce.cc:132:opt_mux$890
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$871' from module `\OPC'.
  Cell `$procmux$426' is identical to cell `$procmux$383'.
    Redirecting output \Y: $procmux$426_Y = $procmux$383_Y
    Removing $mux cell `$procmux$426' from module `\OPC'.
  Cell `$procmux$448' is identical to cell `$procmux$404'.
    Redirecting output \Y: $procmux$448_Y = $procmux$404_Y
    Removing $mux cell `$procmux$448' from module `\OPC'.
  Cell `$procmux$471' is identical to cell `$procmux$383'.
    Redirecting output \Y: $procmux$471_Y = $procmux$383_Y
    Removing $mux cell `$procmux$471' from module `\OPC'.
  Cell `$procmux$494' is identical to cell `$procmux$404'.
    Redirecting output \Y: $procmux$494_Y = $procmux$404_Y
    Removing $mux cell `$procmux$494' from module `\OPC'.
  Cell `$procmux$287' is identical to cell `$procmux$323'.
    Redirecting output \Y: $procmux$287_Y = $procmux$323_Y
    Removing $mux cell `$procmux$287' from module `\OPC'.
  Cell `$procmux$342' is identical to cell `$procmux$383'.
    Redirecting output \Y: $procmux$342_Y = $procmux$383_Y
    Removing $mux cell `$procmux$342' from module `\OPC'.
  Cell `$procmux$305' is identical to cell `$procmux$270'.
    Redirecting output \Y: $procmux$305_Y = $procmux$270_Y
    Removing $mux cell `$procmux$305' from module `\OPC'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$899' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$889'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$900 = $auto$opt_reduce.cc:132:opt_mux$890
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$899' from module `\OPC'.
  Cell `$procmux$362' is identical to cell `$procmux$404'.
    Redirecting output \Y: $procmux$362_Y = $procmux$404_Y
    Removing $mux cell `$procmux$362' from module `\OPC'.
Removed a total of 18 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$869 ($dff) from module OPC.
Replaced 1 DFF cells.

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BFCPU..
Finding unused cells or wires in module \DC..
Finding unused cells or wires in module \DPC..
Finding unused cells or wires in module \OPC..
  removing unused `$mux' cell `$procmux$86'.
  removing unused `$mux' cell `$procmux$93'.
  removing unused `$mux' cell `$procmux$130'.
  removing unused `$mux' cell `$procmux$535'.
  removing unused `$not' cell `$auto$proc_dlatch.cc:238:make_hold$673'.
  removing unused `$not' cell `$auto$proc_dlatch.cc:238:make_hold$677'.
  removing unused `$not' cell `$auto$proc_dlatch.cc:238:make_hold$681'.
  removing unused `$and' cell `$auto$proc_dlatch.cc:251:make_hold$685'.
  removing unused `$and' cell `$auto$proc_dlatch.cc:251:make_hold$691'.
  removing unused `$and' cell `$auto$proc_dlatch.cc:251:make_hold$697'.
  removing unused `$and' cell `$auto$proc_dlatch.cc:251:make_hold$703'.
  removing unused `$and' cell `$auto$proc_dlatch.cc:251:make_hold$709'.
  removing unused `$and' cell `$auto$proc_dlatch.cc:251:make_hold$715'.
  removing unused `$and' cell `$auto$proc_dlatch.cc:251:make_hold$721'.
  removing unused `$and' cell `$auto$proc_dlatch.cc:251:make_hold$725'.
  removing unused `$reduce_or' cell `$auto$proc_dlatch.cc:247:make_hold$727'.
  removing unused `$and' cell `$auto$proc_dlatch.cc:251:make_hold$731'.
  removing unused `$and' cell `$auto$proc_dlatch.cc:251:make_hold$737'.
  removing unused `$not' cell `$auto$proc_dlatch.cc:238:make_hold$739'.
  removing unused `$and' cell `$auto$proc_dlatch.cc:251:make_hold$751'.
  removing unused `$and' cell `$auto$proc_dlatch.cc:251:make_hold$757'.
  removing unused `$and' cell `$auto$proc_dlatch.cc:251:make_hold$763'.
  removing unused `$and' cell `$auto$proc_dlatch.cc:251:make_hold$769'.
  removing unused `$and' cell `$auto$proc_dlatch.cc:251:make_hold$775'.
  removing unused `$and' cell `$auto$proc_dlatch.cc:251:make_hold$781'.
  removing unused `$and' cell `$auto$proc_dlatch.cc:251:make_hold$787'.
  removing unused `$and' cell `$auto$proc_dlatch.cc:251:make_hold$791'.
  removing unused `$reduce_or' cell `$auto$proc_dlatch.cc:247:make_hold$793'.
  removing unused `$and' cell `$auto$proc_dlatch.cc:251:make_hold$797'.
  removing unused `$and' cell `$auto$proc_dlatch.cc:251:make_hold$803'.
  removing unused `$and' cell `$auto$proc_dlatch.cc:251:make_hold$807'.
  removing unused `$and' cell `$auto$proc_dlatch.cc:251:make_hold$811'.
  removing unused `$reduce_or' cell `$auto$proc_dlatch.cc:247:make_hold$857'.
  removing unused `$not' cell `$auto$proc_dlatch.cc:408:proc_dlatch$859'.
  removing unused `$dlatch' cell `$auto$proc_dlatch.cc:408:proc_dlatch$861'.
  removing unused non-port wire \bracketdelta.
  removed 1 unused temporary wires.

3.6.8. Executing OPT_EXPR pass (perform const folding).
Replacing $reduce_bool cell `$ne$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:355$25' (0) in module `\OPC' with constant driver `$ne$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:355$25_Y = 1'0'.
Replacing $add cell `$add$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:356$26' in module `\OPC' with identity for port A.
Replacing $mux cell `$procmux$89' (0) in module `\OPC' with constant driver `$4\bracketcount[7:0] = \bracketcount'.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BFCPU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$570 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \DC..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$53 (pure)
    Root of a mux tree: $procmux$59 (pure)
    Root of a mux tree: $procmux$68 (pure)
    Root of a mux tree: $procmux$80 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \DPC..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$83 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \OPC..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$501 (pure)
    Root of a mux tree: $procmux$518 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BFCPU.
  Optimizing cells in module \DC.
  Optimizing cells in module \DPC.
  Optimizing cells in module \OPC.
    New input vector for $reduce_or cell $auto$proc_dlatch.cc:247:make_hold$664: { $auto$rtlil.cc:1629:And$575 $auto$rtlil.cc:1629:And$579 $auto$rtlil.cc:1629:And$583 $auto$rtlil.cc:1629:And$601 $auto$rtlil.cc:1629:And$619 $auto$rtlil.cc:1629:And$623 $auto$rtlil.cc:1629:And$627 $auto$rtlil.cc:1629:And$631 $auto$rtlil.cc:1629:And$635 $auto$rtlil.cc:1629:And$639 $auto$rtlil.cc:1629:And$643 $auto$rtlil.cc:1629:And$647 $auto$rtlil.cc:1629:And$651 $auto$rtlil.cc:1629:And$655 $auto$rtlil.cc:1629:And$659 $auto$rtlil.cc:1629:And$663 }
    New ctrl vector for $pmux cell $procmux$501: { $auto$opt_reduce.cc:132:opt_mux$904 $auto$opt_reduce.cc:132:opt_mux$902 $procmux$511_CMP $procmux$510_CMP $procmux$247_CMP $procmux$226_CMP $procmux$199_CMP $procmux$174_CMP $procmux$136_CMP $procmux$108_CMP $auto$opt_reduce.cc:132:opt_mux$892 }
    New ctrl vector for $pmux cell $procmux$518: { $auto$opt_reduce.cc:132:opt_mux$908 $auto$opt_reduce.cc:132:opt_mux$906 $procmux$247_CMP $auto$opt_reduce.cc:132:opt_mux$896 $procmux$199_CMP $procmux$174_CMP $procmux$108_CMP $auto$opt_reduce.cc:132:opt_mux$894 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$901: { $procmux$275_CMP $procmux$310_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$903: { $procmux$348_CMP $procmux$389_CMP $procmux$432_CMP $procmux$477_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$905: { $procmux$275_CMP $procmux$310_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$907: { $procmux$348_CMP $procmux$389_CMP $procmux$432_CMP $procmux$477_CMP }
  Optimizing cells in module \OPC.
Performed a total of 7 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BFCPU'.
Finding identical cells in module `\DC'.
Finding identical cells in module `\DPC'.
Finding identical cells in module `\OPC'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$903' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$907'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$904 = $auto$opt_reduce.cc:132:opt_mux$908
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$903' from module `\OPC'.
  Cell `$auto$opt_reduce.cc:126:opt_mux$901' is identical to cell `$auto$opt_reduce.cc:126:opt_mux$905'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$902 = $auto$opt_reduce.cc:132:opt_mux$906
    Removing $reduce_or cell `$auto$opt_reduce.cc:126:opt_mux$901' from module `\OPC'.
Removed a total of 2 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$868 ($dff) from module OPC.
Replaced 1 DFF cells.

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BFCPU..
Finding unused cells or wires in module \DC..
Finding unused cells or wires in module \DPC..
Finding unused cells or wires in module \OPC..
  removing buffer cell `$add$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:356$26': $add$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:356$26_Y = \bracketcount

3.6.15. Executing OPT_EXPR pass (perform const folding).

3.6.16. Rerunning OPT passes. (Maybe there is more to do..)

3.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BFCPU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$570 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \DC..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$53 (pure)
    Root of a mux tree: $procmux$59 (pure)
    Root of a mux tree: $procmux$68 (pure)
    Root of a mux tree: $procmux$80 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \DPC..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$83 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \OPC..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$501 (pure)
    Root of a mux tree: $procmux$518 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BFCPU.
  Optimizing cells in module \DC.
  Optimizing cells in module \DPC.
  Optimizing cells in module \OPC.
Performed a total of 0 changes.

3.6.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BFCPU'.
Finding identical cells in module `\DC'.
Finding identical cells in module `\DPC'.
Finding identical cells in module `\OPC'.
Removed a total of 0 cells.

3.6.20. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BFCPU..
Finding unused cells or wires in module \DC..
Finding unused cells or wires in module \DPC..
Finding unused cells or wires in module \OPC..

3.6.22. Executing OPT_EXPR pass (perform const folding).

3.6.23. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 4) from port B of cell BFCPU.$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:28$1 ($eq).
Removed top 1 bits (of 4) from port B of cell BFCPU.$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:29$2 ($eq).
Removed top 2 bits (of 3) from port B of cell BFCPU.$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:30$3 ($eq).
Removed top 31 bits (of 32) from port B of cell DC.$sub$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:399$37 ($sub).
Removed top 31 bits (of 32) from port B of cell DC.$add$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:399$38 ($add).
Removed top 23 bits (of 32) from port Y of cell DC.$add$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:399$38 ($add).
Removed top 24 bits (of 32) from mux cell DC.$ternary$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:399$39 ($mux).
Removed top 24 bits (of 32) from port Y of cell DC.$sub$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:399$37 ($sub).
Removed top 1 bits (of 9) from port Y of cell DC.$add$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:399$38 ($add).
Removed top 24 bits (of 32) from wire DC.$add$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:399$38_Y.
Removed top 24 bits (of 32) from wire DC.$sub$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:399$37_Y.
Removed top 24 bits (of 32) from wire DC.$ternary$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:399$39_Y.
Removed top 31 bits (of 32) from port B of cell DPC.$sub$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:374$31 ($sub).
Removed top 31 bits (of 32) from port B of cell DPC.$add$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:374$32 ($add).
Removed top 16 bits (of 32) from port Y of cell DPC.$add$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:374$32 ($add).
Removed top 17 bits (of 32) from mux cell DPC.$ternary$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:374$33 ($mux).
Removed top 17 bits (of 32) from port Y of cell DPC.$sub$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:374$31 ($sub).
Removed top 1 bits (of 16) from port Y of cell DPC.$add$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:374$32 ($add).
Removed top 17 bits (of 32) from wire DPC.$add$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:374$32_Y.
Removed top 17 bits (of 32) from wire DPC.$sub$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:374$31_Y.
Removed top 1 bits (of 4) from mux cell OPC.$procmux$111 ($mux).
Removed top 1 bits (of 4) from mux cell OPC.$procmux$156 ($mux).
Removed top 1 bits (of 4) from port B of cell OPC.$procmux$174_CMP0 ($eq).
Removed top 15 bits (of 16) from mux cell OPC.$procmux$196 ($mux).
Removed top 1 bits (of 4) from port B of cell OPC.$procmux$199_CMP0 ($eq).
Removed top 2 bits (of 4) from mux cell OPC.$procmux$233 ($mux).
Removed top 15 bits (of 16) from mux cell OPC.$procmux$244 ($mux).
Removed top 15 bits (of 16) from mux cell OPC.$procmux$270 ($mux).
Removed top 2 bits (of 3) from port B of cell OPC.$procmux$272_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell OPC.$procmux$275_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell OPC.$procmux$348_CMP0 ($eq).
Removed top 15 bits (of 16) from mux cell OPC.$procmux$383 ($mux).
Removed top 2 bits (of 4) from port B of cell OPC.$procmux$389_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell OPC.$procmux$432_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell OPC.$procmux$477_CMP0 ($eq).
Removed top 15 bits (of 16) from wire OPC.$10\PCDELTA[15:0].
Removed top 1 bits (of 4) from wire OPC.$12\NEXTSTATE[3:0].
Removed top 1 bits (of 4) from wire OPC.$13\NEXTSTATE[3:0].
Removed top 15 bits (of 16) from wire OPC.$2\PCDELTA[15:0].
Removed top 15 bits (of 16) from wire OPC.$6\PCDELTA[15:0].
Removed top 15 bits (of 16) from wire OPC.$8\PCDELTA[15:0].
Removed top 2 bits (of 4) from wire OPC.$9\NEXTSTATE[3:0].

3.8. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module BFCPU:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module DC:
  creating $macc model for $add$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:399$38 ($add).
  creating $macc model for $sub$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:399$37 ($sub).
  creating $alu model for $macc $sub$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:399$37.
  creating $alu model for $macc $add$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:399$38.
  creating $alu cell for $add$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:399$38: $auto$alumacc.cc:470:replace_alu$921
  creating $alu cell for $sub$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:399$37: $auto$alumacc.cc:470:replace_alu$924
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module DPC:
  creating $macc model for $add$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:374$32 ($add).
  creating $macc model for $sub$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:374$31 ($sub).
  creating $alu model for $macc $sub$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:374$31.
  creating $alu model for $macc $add$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:374$32.
  creating $alu cell for $add$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:374$32: $auto$alumacc.cc:470:replace_alu$927
  creating $alu cell for $sub$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:374$31: $auto$alumacc.cc:470:replace_alu$930
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module OPC:
  created 0 $alu and 0 $macc cells.

3.9. Executing SHARE pass (SAT-based resource sharing).

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BFCPU'.
Finding identical cells in module `\DC'.
Finding identical cells in module `\DPC'.
Finding identical cells in module `\OPC'.
Removed a total of 0 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BFCPU..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$570 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \DC..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$53 (pure)
    Root of a mux tree: $procmux$59 (pure)
    Root of a mux tree: $procmux$68 (pure)
    Root of a mux tree: $procmux$80 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \DPC..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$83 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \OPC..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$501 (pure)
    Root of a mux tree: $procmux$518 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BFCPU.
  Optimizing cells in module \DC.
  Optimizing cells in module \DPC.
  Optimizing cells in module \OPC.
Performed a total of 0 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BFCPU'.
Finding identical cells in module `\DC'.
Finding identical cells in module `\DPC'.
Finding identical cells in module `\OPC'.
Removed a total of 0 cells.

3.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BFCPU..
Finding unused cells or wires in module \DC..
Finding unused cells or wires in module \DPC..
Finding unused cells or wires in module \OPC..

3.10.8. Executing OPT_EXPR pass (perform const folding).

3.10.9. Finished OPT passes. (There is nothing left to do.)

3.11. Executing FSM pass (extract and optimize FSM).

3.11.1. Executing FSM_DETECT pass (finding FSMs in design).

3.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BFCPU..
Finding unused cells or wires in module \DC..
Finding unused cells or wires in module \DPC..
Finding unused cells or wires in module \OPC..

3.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BFCPU'.
Finding identical cells in module `\DC'.
Finding identical cells in module `\DPC'.
Finding identical cells in module `\OPC'.
Removed a total of 0 cells.

3.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BFCPU..
Finding unused cells or wires in module \DC..
Finding unused cells or wires in module \DPC..
Finding unused cells or wires in module \OPC..

3.12.5. Finished fast OPT passes.

3.13. Executing MEMORY pass.

3.13.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.13.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BFCPU..
Finding unused cells or wires in module \DC..
Finding unused cells or wires in module \DPC..
Finding unused cells or wires in module \OPC..

3.13.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BFCPU..
Finding unused cells or wires in module \DC..
Finding unused cells or wires in module \DPC..
Finding unused cells or wires in module \OPC..

3.13.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BFCPU..
Finding unused cells or wires in module \DC..
Finding unused cells or wires in module \DPC..
Finding unused cells or wires in module \OPC..

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Replacing $mux cell `$procmux$570' in module `BFCPU' with or-gate.
Replacing $mux cell `$procmux$196' in module `OPC' with inverter.
Replacing $mux cell `$procmux$244' (mux_bool) in module `\OPC' with constant driver `$8\PCDELTA[15:0] = \WF'.
Replacing $mux cell `$procmux$270' (mux_bool) in module `\OPC' with constant driver `$6\PCDELTA[15:0] = $auto$opt_reduce.cc:132:opt_mux$874'.
Replacing $mux cell `$procmux$383' in module `OPC' with inverter.
Optimized away 1 select inputs of $pmux cell `$procmux$501' in module `OPC'.
Optimized away 1 select inputs of $pmux cell `$procmux$518' in module `OPC'.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BFCPU'.
Finding identical cells in module `\DC'.
Finding identical cells in module `\DPC'.
Finding identical cells in module `\OPC'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BFCPU..
Finding unused cells or wires in module \DC..
Finding unused cells or wires in module \DPC..
Finding unused cells or wires in module \OPC..
  removing unused `$reduce_or' cell `$auto$opt_reduce.cc:126:opt_mux$907'.

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BFCPU'.
Finding identical cells in module `\DC'.
Finding identical cells in module `\DPC'.
Finding identical cells in module `\OPC'.
  Cell `$procmux$196' is identical to cell `$auto$proc_dlatch.cc:238:make_hold$602'.
    Redirecting output \Y: $10\PCDELTA[15:0] = $auto$rtlil.cc:1600:Not$603
    Removing $not cell `$procmux$196' from module `\OPC'.
Removed a total of 1 cells.

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BFCPU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \DC..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$53 (pure)
    Root of a mux tree: $procmux$59 (pure)
    Root of a mux tree: $procmux$68 (pure)
    Root of a mux tree: $procmux$80 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \DPC..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$83 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \OPC..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$501 (pure)
    Root of a mux tree: $procmux$518 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BFCPU.
  Optimizing cells in module \DC.
  Optimizing cells in module \DPC.
  Optimizing cells in module \OPC.
    Consolidated identical input bits for $mux cell $procmux$111:
      Old ports: A=3'111, B=3'010, Y=$13\NEXTSTATE[3:0]
      New ports: A=1'1, B=1'0, Y=$13\NEXTSTATE[3:0] [0]
      New connections: $13\NEXTSTATE[3:0] [2:1] = { $13\NEXTSTATE[3:0] [0] 1'1 }
    Consolidated identical input bits for $mux cell $procmux$117:
      Old ports: A=16'1111111111111111, B=16'0000000000000001, Y=$13\PCDELTA[15:0]
      New ports: A=1'1, B=1'0, Y=$13\PCDELTA[15:0] [1]
      New connections: { $13\PCDELTA[15:0] [15:2] $13\PCDELTA[15:0] [0] } = { $13\PCDELTA[15:0] [1] $13\PCDELTA[15:0] [1] $13\PCDELTA[15:0] [1] $13\PCDELTA[15:0] [1] $13\PCDELTA[15:0] [1] $13\PCDELTA[15:0] [1] $13\PCDELTA[15:0] [1] $13\PCDELTA[15:0] [1] $13\PCDELTA[15:0] [1] $13\PCDELTA[15:0] [1] $13\PCDELTA[15:0] [1] $13\PCDELTA[15:0] [1] $13\PCDELTA[15:0] [1] $13\PCDELTA[15:0] [1] 1'1 }
    Consolidated identical input bits for $mux cell $procmux$156:
      Old ports: A=3'110, B=3'010, Y=$12\NEXTSTATE[3:0]
      New ports: A=1'1, B=1'0, Y=$12\NEXTSTATE[3:0] [2]
      New connections: $12\NEXTSTATE[3:0] [1:0] = 2'10
    Consolidated identical input bits for $mux cell $procmux$171:
      Old ports: A=16'1111111111111110, B=16'0000000000000001, Y=$11\PCDELTA[15:0]
      New ports: A=2'10, B=2'01, Y=$11\PCDELTA[15:0] [1:0]
      New connections: $11\PCDELTA[15:0] [15:2] = { $11\PCDELTA[15:0] [1] $11\PCDELTA[15:0] [1] $11\PCDELTA[15:0] [1] $11\PCDELTA[15:0] [1] $11\PCDELTA[15:0] [1] $11\PCDELTA[15:0] [1] $11\PCDELTA[15:0] [1] $11\PCDELTA[15:0] [1] $11\PCDELTA[15:0] [1] $11\PCDELTA[15:0] [1] $11\PCDELTA[15:0] [1] $11\PCDELTA[15:0] [1] $11\PCDELTA[15:0] [1] $11\PCDELTA[15:0] [1] }
    Consolidated identical input bits for $mux cell $procmux$233:
      Old ports: A=2'00, B=2'11, Y=$9\NEXTSTATE[3:0]
      New ports: A=1'0, B=1'1, Y=$9\NEXTSTATE[3:0] [0]
      New connections: $9\NEXTSTATE[3:0] [1] = $9\NEXTSTATE[3:0] [0]
  Optimizing cells in module \OPC.
    Consolidated identical input bits for $pmux cell $procmux$518:
      Old ports: A={ 15'000000000000000 $2\PCDELTA[15:0] }, B={ 15'000000000000000 $6\PCDELTA[15:0] 15'000000000000000 \WF 31'0000000000000000000000000000000 $auto$rtlil.cc:1600:Not$603 $11\PCDELTA[15:0] $13\PCDELTA[15:0] 16'0000000000000001 }, Y=\PCDELTA
      New ports: A={ 1'0 $2\PCDELTA[15:0] }, B={ 1'0 $6\PCDELTA[15:0] 1'0 \WF 3'000 $auto$rtlil.cc:1600:Not$603 $11\PCDELTA[15:0] [1:0] $13\PCDELTA[15:0] [1] 3'101 }, Y=\PCDELTA [1:0]
      New connections: \PCDELTA [15:2] = { \PCDELTA [1] \PCDELTA [1] \PCDELTA [1] \PCDELTA [1] \PCDELTA [1] \PCDELTA [1] \PCDELTA [1] \PCDELTA [1] \PCDELTA [1] \PCDELTA [1] \PCDELTA [1] \PCDELTA [1] \PCDELTA [1] \PCDELTA [1] }
  Optimizing cells in module \OPC.
Performed a total of 6 changes.

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BFCPU'.
Finding identical cells in module `\DC'.
Finding identical cells in module `\DPC'.
Finding identical cells in module `\OPC'.
  Cell `$procmux$117' is identical to cell `$procmux$111'.
    Redirecting output \Y: $13\PCDELTA[15:0] [1] = $13\NEXTSTATE[3:0] [0]
    Removing $mux cell `$procmux$117' from module `\OPC'.
Removed a total of 1 cells.

3.17.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BFCPU..
Finding unused cells or wires in module \DC..
Finding unused cells or wires in module \DPC..
Finding unused cells or wires in module \OPC..

3.17.8. Executing OPT_EXPR pass (perform const folding).
Replacing $mux cell `$procmux$111' in module `OPC' with inverter.
Replacing $mux cell `$procmux$156' in module `OPC' with inverter.
Replacing $mux cell `$procmux$233' (mux_bool) in module `\OPC' with constant driver `$9\NEXTSTATE[3:0] [1] = \RF'.

3.17.9. Rerunning OPT passes. (Maybe there is more to do..)

3.17.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BFCPU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \DC..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$53 (pure)
    Root of a mux tree: $procmux$59 (pure)
    Root of a mux tree: $procmux$68 (pure)
    Root of a mux tree: $procmux$80 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \DPC..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$83 (pure)
  Analyzing evaluation results.
Running muxtree optimizer on module \OPC..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$501 (pure)
    Root of a mux tree: $procmux$518 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.17.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BFCPU.
  Optimizing cells in module \DC.
  Optimizing cells in module \DPC.
  Optimizing cells in module \OPC.
Performed a total of 0 changes.

3.17.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BFCPU'.
Finding identical cells in module `\DC'.
Finding identical cells in module `\DPC'.
Finding identical cells in module `\OPC'.
Removed a total of 0 cells.

3.17.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BFCPU..
Finding unused cells or wires in module \DC..
Finding unused cells or wires in module \DPC..
Finding unused cells or wires in module \OPC..

3.17.15. Executing OPT_EXPR pass (perform const folding).

3.17.16. Finished OPT passes. (There is nothing left to do.)

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
Mapping BFCPU.$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:28$1 ($eq) with simplemap.
Mapping BFCPU.$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:29$2 ($eq) with simplemap.
Mapping BFCPU.$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:30$3 ($eq) with simplemap.
Mapping BFCPU.$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:31$4 ($logic_not) with simplemap.
Mapping BFCPU.$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:32$5 ($eq) with simplemap.
Mapping BFCPU.$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:33$6 ($eq) with simplemap.
Mapping BFCPU.$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:34$7 ($eq) with simplemap.
Mapping BFCPU.$reduce_xor$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:47$9 ($reduce_xor) with simplemap.
Mapping BFCPU.$eqx$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:47$10 ($eqx) with simplemap.
Mapping BFCPU.$procmux$570 ($or) with simplemap.
Mapping BFCPU.$procdff$870 ($dff) with simplemap.
Mapping OPC.$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$14 ($eq) with simplemap.
Mapping OPC.$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$15 ($logic_not) with simplemap.
Mapping OPC.$logic_and$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:305$16 ($logic_and) with simplemap.
Mapping OPC.$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:310$17 ($eq) with simplemap.
Mapping OPC.$logic_and$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:319$21 ($logic_and) with simplemap.
Mapping OPC.$auto$opt_reduce.cc:126:opt_mux$905 ($reduce_or) with simplemap.
Mapping OPC.$procmux$108_CMP0 ($eq) with simplemap.
Mapping OPC.$procmux$111 ($not) with simplemap.
Mapping OPC.$procmux$136_CMP0 ($eq) with simplemap.
Mapping OPC.$procmux$156 ($not) with simplemap.
Mapping OPC.$procmux$171 ($mux) with simplemap.
Mapping OPC.$procmux$174_CMP0 ($eq) with simplemap.
Mapping OPC.$procmux$179 ($mux) with simplemap.
Mapping OPC.$procmux$199_CMP0 ($eq) with simplemap.
Mapping OPC.$procmux$214 ($mux) with simplemap.
Mapping OPC.$procmux$226_CMP0 ($eq) with simplemap.
Mapping OPC.$procmux$247_CMP0 ($eq) with simplemap.
Mapping OPC.$procmux$255 ($mux) with simplemap.
Mapping OPC.$procmux$271_CMP0 ($eq) with simplemap.
Mapping OPC.$procmux$272_CMP0 ($eq) with simplemap.
Mapping OPC.$procmux$273_CMP0 ($logic_not) with simplemap.
Mapping OPC.$procmux$275_CMP0 ($eq) with simplemap.
Mapping OPC.$procmux$310_CMP0 ($logic_not) with simplemap.
Mapping OPC.$auto$opt_reduce.cc:126:opt_mux$895 ($reduce_or) with simplemap.
Mapping OPC.$procmux$323 ($mux) with simplemap.
Mapping OPC.$procmux$348_CMP0 ($eq) with simplemap.
Mapping OPC.$auto$opt_reduce.cc:126:opt_mux$893 ($reduce_or) with simplemap.
Mapping OPC.$procmux$383 ($not) with simplemap.
Mapping OPC.$procmux$389_CMP0 ($eq) with simplemap.
Mapping OPC.$auto$opt_reduce.cc:126:opt_mux$891 ($reduce_or) with simplemap.
Mapping OPC.$procmux$404 ($mux) with simplemap.
Mapping OPC.$procmux$432_CMP0 ($eq) with simplemap.
Mapping OPC.$auto$opt_reduce.cc:126:opt_mux$889 ($reduce_or) with simplemap.
Mapping OPC.$procmux$477_CMP0 ($eq) with simplemap.
Mapping OPC.$procmux$502_CMP0 ($eq) with simplemap.

3.18.2. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 4
Parameter \S_WIDTH = 10
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=4\S_WIDTH=10'.

3.18.3. Continuing TECHMAP pass.
Mapping OPC.$procmux$501 using $paramod\_90_pmux\WIDTH=4\S_WIDTH=10.
Mapping OPC.$procmux$509_CMP0 ($eq) with simplemap.
Mapping OPC.$procmux$510_CMP0 ($eq) with simplemap.
Mapping OPC.$procmux$511_CMP0 ($eq) with simplemap.

3.18.4. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_pmux'.
Parameter \WIDTH = 2
Parameter \S_WIDTH = 7
Generating RTLIL representation for module `$paramod\_90_pmux\WIDTH=2\S_WIDTH=7'.

3.18.5. Continuing TECHMAP pass.
Mapping OPC.$procmux$518 using $paramod\_90_pmux\WIDTH=2\S_WIDTH=7.
Mapping OPC.$auto$proc_dlatch.cc:251:make_hold$578 ($and) with simplemap.
Mapping OPC.$auto$proc_dlatch.cc:251:make_hold$582 ($and) with simplemap.
Mapping OPC.$auto$proc_dlatch.cc:251:make_hold$588 ($and) with simplemap.
Mapping OPC.$auto$proc_dlatch.cc:251:make_hold$594 ($and) with simplemap.
Mapping OPC.$auto$proc_dlatch.cc:251:make_hold$600 ($and) with simplemap.
Mapping OPC.$auto$proc_dlatch.cc:238:make_hold$602 ($not) with simplemap.
Mapping OPC.$auto$proc_dlatch.cc:251:make_hold$606 ($and) with simplemap.
Mapping OPC.$auto$proc_dlatch.cc:251:make_hold$612 ($and) with simplemap.
Mapping OPC.$auto$proc_dlatch.cc:251:make_hold$618 ($and) with simplemap.
Mapping OPC.$auto$proc_dlatch.cc:251:make_hold$622 ($and) with simplemap.
Mapping OPC.$auto$proc_dlatch.cc:251:make_hold$626 ($and) with simplemap.
Mapping OPC.$auto$proc_dlatch.cc:251:make_hold$630 ($and) with simplemap.
Mapping OPC.$auto$proc_dlatch.cc:251:make_hold$634 ($and) with simplemap.
Mapping OPC.$auto$proc_dlatch.cc:251:make_hold$638 ($and) with simplemap.
Mapping OPC.$auto$proc_dlatch.cc:251:make_hold$642 ($and) with simplemap.
Mapping OPC.$auto$proc_dlatch.cc:251:make_hold$646 ($and) with simplemap.
Mapping OPC.$auto$proc_dlatch.cc:251:make_hold$650 ($and) with simplemap.
Mapping OPC.$auto$proc_dlatch.cc:251:make_hold$654 ($and) with simplemap.
Mapping OPC.$auto$proc_dlatch.cc:251:make_hold$658 ($and) with simplemap.
Mapping OPC.$auto$proc_dlatch.cc:251:make_hold$662 ($and) with simplemap.
Mapping OPC.$auto$proc_dlatch.cc:247:make_hold$664 ($reduce_or) with simplemap.
Mapping OPC.$auto$proc_dlatch.cc:408:proc_dlatch$666 ($not) with simplemap.
Mapping OPC.$auto$proc_dlatch.cc:408:proc_dlatch$668 ($dlatch) with simplemap.
Mapping OPC.$auto$proc_dlatch.cc:251:make_hold$671 ($and) with simplemap.
Mapping OPC.$auto$opt_reduce.cc:126:opt_mux$897 ($reduce_or) with simplemap.
Mapping OPC.$procdff$867 ($dff) with simplemap.
Mapping OPC.$techmap$procmux$501.$ternary$<techmap.v>:445$1383 ($mux) with simplemap.
Mapping OPC.$techmap$procmux$501.$reduce_or$<techmap.v>:445$1382 ($reduce_or) with simplemap.
Mapping OPC.$techmap$procmux$501.$and$<techmap.v>:434$1384 ($and) with simplemap.
Mapping OPC.$techmap$procmux$501.$and$<techmap.v>:434$1385 ($and) with simplemap.
Mapping OPC.$techmap$procmux$501.$and$<techmap.v>:434$1386 ($and) with simplemap.
Mapping OPC.$techmap$procmux$501.$and$<techmap.v>:434$1388 ($and) with simplemap.
Mapping OPC.$techmap$procmux$501.$and$<techmap.v>:434$1387 ($and) with simplemap.
Mapping OPC.$techmap$procmux$501.$and$<techmap.v>:434$1389 ($and) with simplemap.
Mapping OPC.$techmap$procmux$501.$and$<techmap.v>:434$1390 ($and) with simplemap.
Mapping OPC.$techmap$procmux$501.$and$<techmap.v>:434$1391 ($and) with simplemap.
Mapping OPC.$techmap$procmux$501.$and$<techmap.v>:434$1392 ($and) with simplemap.
Mapping OPC.$techmap$procmux$501.$and$<techmap.v>:434$1393 ($and) with simplemap.
Mapping OPC.$techmap$procmux$501.$reduce_or$<techmap.v>:441$1394 ($reduce_or) with simplemap.
Mapping OPC.$techmap$procmux$501.$reduce_or$<techmap.v>:441$1397 ($reduce_or) with simplemap.
Mapping OPC.$techmap$procmux$501.$reduce_or$<techmap.v>:441$1395 ($reduce_or) with simplemap.
Mapping OPC.$techmap$procmux$501.$reduce_or$<techmap.v>:441$1396 ($reduce_or) with simplemap.
Mapping OPC.$techmap$procmux$518.$reduce_or$<techmap.v>:445$1443 ($reduce_or) with simplemap.
Mapping OPC.$techmap$procmux$518.$ternary$<techmap.v>:445$1444 ($mux) with simplemap.
Mapping OPC.$techmap$procmux$518.$and$<techmap.v>:434$1445 ($and) with simplemap.
Mapping OPC.$techmap$procmux$518.$and$<techmap.v>:434$1446 ($and) with simplemap.
Mapping OPC.$techmap$procmux$518.$and$<techmap.v>:434$1447 ($and) with simplemap.
Mapping OPC.$techmap$procmux$518.$and$<techmap.v>:434$1448 ($and) with simplemap.
Mapping OPC.$techmap$procmux$518.$and$<techmap.v>:434$1449 ($and) with simplemap.
Mapping OPC.$techmap$procmux$518.$and$<techmap.v>:434$1450 ($and) with simplemap.
Mapping OPC.$techmap$procmux$518.$and$<techmap.v>:434$1451 ($and) with simplemap.
Mapping OPC.$techmap$procmux$518.$reduce_or$<techmap.v>:441$1453 ($reduce_or) with simplemap.
Mapping OPC.$techmap$procmux$518.$reduce_or$<techmap.v>:441$1452 ($reduce_or) with simplemap.

3.18.6. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 1
Parameter \B_WIDTH = 15
Parameter \Y_WIDTH = 15
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=15\Y_WIDTH=15'.

3.18.7. Continuing TECHMAP pass.
Mapping DPC.$auto$alumacc.cc:470:replace_alu$927 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=15\Y_WIDTH=15.

3.18.8. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 15
Parameter \B_WIDTH = 1
Parameter \Y_WIDTH = 15
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=15\B_WIDTH=1\Y_WIDTH=15'.

3.18.9. Continuing TECHMAP pass.
Mapping DPC.$auto$alumacc.cc:470:replace_alu$930 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=15\B_WIDTH=1\Y_WIDTH=15.
Mapping DPC.$ternary$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:374$33 ($mux) with simplemap.
Mapping DPC.$procmux$83 ($mux) with simplemap.
Mapping DPC.$procdff$866 ($dff) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.$xor$<techmap.v>:262$1666 ($xor) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.$xor$<techmap.v>:263$1667 ($xor) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.$and$<techmap.v>:260$1665 ($and) with simplemap.

3.18.10. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_lcu'.
Parameter \WIDTH = 15
Generating RTLIL representation for module `$paramod\_90_lcu\WIDTH=15'.

3.18.11. Executing PROC pass (convert processes to netlists).

3.18.11.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.18.11.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.18.11.3. Executing PROC_INIT pass (extract init attributes).

3.18.11.4. Executing PROC_ARST pass (detect async resets in processes).

3.18.11.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\_90_lcu\WIDTH=15.$proc$<techmap.v>:207$1794'.
     1/30: $0\p[14:0] [14]
     2/30: $0\g[14:0] [14]
     3/30: $0\p[14:0] [12]
     4/30: $0\g[14:0] [12]
     5/30: $0\p[14:0] [10]
     6/30: $0\g[14:0] [10]
     7/30: $0\p[14:0] [8]
     8/30: $0\g[14:0] [8]
     9/30: $0\p[14:0] [6]
    10/30: $0\g[14:0] [6]
    11/30: $0\p[14:0] [4]
    12/30: $0\g[14:0] [4]
    13/30: $0\p[14:0] [2]
    14/30: $0\g[14:0] [2]
    15/30: $0\p[14:0] [13]
    16/30: $0\g[14:0] [13]
    17/30: $0\p[14:0] [9]
    18/30: $0\g[14:0] [9]
    19/30: $0\p[14:0] [5]
    20/30: $0\g[14:0] [5]
    21/30: $0\p[14:0] [11]
    22/30: $0\g[14:0] [11]
    23/30: $0\p[14:0] [7]
    24/30: $0\g[14:0] [7]
    25/30: $0\p[14:0] [3]
    26/30: $0\g[14:0] [3]
    27/30: $0\p[14:0] [1]
    28/30: $0\g[14:0] [1]
    29/30: $0\g[14:0] [0]
    30/30: $0\p[14:0] [0]

3.18.11.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\_90_lcu\WIDTH=15.\p' from process `$paramod\_90_lcu\WIDTH=15.$proc$<techmap.v>:207$1794'.
No latch inferred for signal `$paramod\_90_lcu\WIDTH=15.\g' from process `$paramod\_90_lcu\WIDTH=15.$proc$<techmap.v>:207$1794'.

3.18.11.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.18.11.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\_90_lcu\WIDTH=15.$proc$<techmap.v>:207$1794'.
Cleaned up 0 empty switches.

3.18.12. Executing OPT pass (performing simple optimizations).

3.18.12.1. Executing OPT_EXPR pass (perform const folding).

3.18.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\_90_lcu\WIDTH=15'.
Removed a total of 0 cells.

3.18.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\_90_lcu\WIDTH=15..
  removing unused `$and' cell `$and$<techmap.v>:222$1799'.
  removing unused `$and' cell `$and$<techmap.v>:222$1820'.
  removing unused `$and' cell `$and$<techmap.v>:222$1829'.
  removing unused `$and' cell `$and$<techmap.v>:230$1832'.
  removing unused `$and' cell `$and$<techmap.v>:230$1835'.
  removing unused `$and' cell `$and$<techmap.v>:230$1838'.
  removing unused `$and' cell `$and$<techmap.v>:230$1841'.
  removing unused `$and' cell `$and$<techmap.v>:230$1844'.
  removing unused `$and' cell `$and$<techmap.v>:230$1847'.
  removing unused `$and' cell `$and$<techmap.v>:230$1850'.
  removing unused `$and' cell `$and$<techmap.v>:230$1853'.
  removing unused `$and' cell `$and$<techmap.v>:230$1856'.
  removing unused `$and' cell `$and$<techmap.v>:230$1859'.
  removing unused `$and' cell `$and$<techmap.v>:230$1862'.
  removing unused non-port wire \j.
  removing unused non-port wire \i.
  removed 2 unused temporary wires.

3.18.12.5. Finished fast OPT passes.

3.18.13. Continuing TECHMAP pass.
Mapping DPC.$auto$alumacc.cc:470:replace_alu$927.lcu using $paramod\_90_lcu\WIDTH=15.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.$ternary$<techmap.v>:258$1664 ($mux) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.$not$<techmap.v>:258$1663 ($not) with simplemap.
Mapping DPC.$auto$alumacc.cc:470:replace_alu$927.B_conv ($pos) with simplemap.
Mapping DPC.$auto$alumacc.cc:470:replace_alu$927.A_conv ($pos) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.$xor$<techmap.v>:262$1671 ($xor) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.$xor$<techmap.v>:263$1672 ($xor) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.$and$<techmap.v>:260$1670 ($and) with simplemap.
Mapping DPC.$auto$alumacc.cc:470:replace_alu$930.lcu using $paramod\_90_lcu\WIDTH=15.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.$ternary$<techmap.v>:258$1669 ($mux) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.$not$<techmap.v>:258$1668 ($not) with simplemap.
Mapping DPC.$auto$alumacc.cc:470:replace_alu$930.B_conv ($pos) with simplemap.
Mapping DPC.$auto$alumacc.cc:470:replace_alu$930.A_conv ($pos) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:221$1797 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:212$1795 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:229$1854 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:229$1851 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:229$1848 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:229$1845 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:229$1842 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:229$1839 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:229$1836 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:229$1833 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:229$1830 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:222$1826 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:222$1823 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:222$1817 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:222$1814 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:222$1811 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:222$1808 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:222$1805 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:229$1861 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:229$1858 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:229$1855 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:229$1852 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:229$1849 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:229$1846 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:229$1843 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:229$1840 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:229$1837 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:229$1834 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:229$1831 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:221$1828 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:221$1825 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:221$1822 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:221$1819 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:221$1816 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:221$1813 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:221$1810 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:221$1807 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:221$1804 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:221$1801 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:221$1798 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:212$1796 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:229$1860 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:222$1802 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:221$1827 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:221$1824 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:221$1821 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:221$1818 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:221$1815 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:221$1812 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:221$1809 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:221$1806 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:221$1803 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:221$1800 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:229$1857 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:212$1795 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:221$1797 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:221$1800 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:221$1803 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:221$1806 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:221$1809 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:221$1812 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:221$1815 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:221$1818 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:221$1821 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:221$1824 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:221$1827 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:222$1802 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:222$1805 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:222$1808 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:222$1811 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:222$1814 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:222$1817 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:222$1823 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:222$1826 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:229$1830 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:229$1833 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:229$1836 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:229$1839 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:229$1842 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:229$1845 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:229$1848 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:229$1851 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:229$1854 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:229$1857 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:229$1860 ($and) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$or$<techmap.v>:212$1796 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$or$<techmap.v>:221$1798 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$or$<techmap.v>:221$1801 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$or$<techmap.v>:221$1804 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$or$<techmap.v>:221$1807 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$or$<techmap.v>:221$1810 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$or$<techmap.v>:221$1813 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$or$<techmap.v>:221$1816 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$or$<techmap.v>:221$1819 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$or$<techmap.v>:221$1822 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$or$<techmap.v>:221$1825 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$or$<techmap.v>:221$1828 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$or$<techmap.v>:229$1831 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$or$<techmap.v>:229$1834 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$or$<techmap.v>:229$1837 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$or$<techmap.v>:229$1840 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$or$<techmap.v>:229$1843 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$or$<techmap.v>:229$1846 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$or$<techmap.v>:229$1849 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$or$<techmap.v>:229$1852 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$or$<techmap.v>:229$1855 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$or$<techmap.v>:229$1858 ($or) with simplemap.
Mapping DPC.$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$or$<techmap.v>:229$1861 ($or) with simplemap.
Mapping DC.$procmux$47 ($mux) with simplemap.
Mapping DC.$procmux$44 ($mux) with simplemap.
Mapping DC.$procmux$53 ($mux) with simplemap.
Mapping DC.$procmux$50 ($mux) with simplemap.
Mapping DC.$eq$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:387$35 ($logic_not) with simplemap.
Mapping DC.$ternary$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:399$39 ($mux) with simplemap.
Mapping DC.$logic_not$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:402$40 ($logic_not) with simplemap.
Mapping DC.$logic_not$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:409$41 ($logic_not) with simplemap.
Mapping DC.$procmux$56 ($mux) with simplemap.
Mapping DC.$procmux$59 ($mux) with simplemap.
Mapping DC.$procmux$62 ($mux) with simplemap.
Mapping DC.$procmux$65 ($mux) with simplemap.
Mapping DC.$procmux$68 ($mux) with simplemap.
Mapping DC.$procmux$71 ($mux) with simplemap.
Mapping DC.$procmux$74 ($mux) with simplemap.
Mapping DC.$procmux$77 ($mux) with simplemap.
Mapping DC.$procmux$80 ($mux) with simplemap.

3.18.14. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 8
Parameter \B_WIDTH = 1
Parameter \Y_WIDTH = 8
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=1\Y_WIDTH=8'.

3.18.15. Continuing TECHMAP pass.
Mapping DC.$auto$alumacc.cc:470:replace_alu$924 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=1\Y_WIDTH=8.

3.18.16. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 1
Parameter \B_WIDTH = 8
Parameter \Y_WIDTH = 8
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8'.

3.18.17. Continuing TECHMAP pass.
Mapping DC.$auto$alumacc.cc:470:replace_alu$921 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=8.
Mapping DC.$procdff$862 ($dff) with simplemap.
Mapping DC.$procdff$863 ($dff) with simplemap.
Mapping DC.$procdff$864 ($dff) with simplemap.
Mapping DC.$procdff$865 ($dff) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.$xor$<techmap.v>:263$2196 ($xor) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.$xor$<techmap.v>:262$2195 ($xor) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.$and$<techmap.v>:260$2194 ($and) with simplemap.

3.18.18. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_lcu'.
Parameter \WIDTH = 8
Generating RTLIL representation for module `$paramod\_90_lcu\WIDTH=8'.

3.18.19. Executing PROC pass (convert processes to netlists).

3.18.19.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.18.19.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.18.19.3. Executing PROC_INIT pass (extract init attributes).

3.18.19.4. Executing PROC_ARST pass (detect async resets in processes).

3.18.19.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\_90_lcu\WIDTH=8.$proc$<techmap.v>:207$2270'.
     1/16: $0\p[7:0] [6]
     2/16: $0\g[7:0] [6]
     3/16: $0\p[7:0] [4]
     4/16: $0\g[7:0] [4]
     5/16: $0\p[7:0] [2]
     6/16: $0\g[7:0] [2]
     7/16: $0\p[7:0] [5]
     8/16: $0\g[7:0] [5]
     9/16: $0\p[7:0] [7]
    10/16: $0\g[7:0] [7]
    11/16: $0\p[7:0] [3]
    12/16: $0\g[7:0] [3]
    13/16: $0\p[7:0] [1]
    14/16: $0\g[7:0] [1]
    15/16: $0\g[7:0] [0]
    16/16: $0\p[7:0] [0]

3.18.19.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\_90_lcu\WIDTH=8.\p' from process `$paramod\_90_lcu\WIDTH=8.$proc$<techmap.v>:207$2270'.
No latch inferred for signal `$paramod\_90_lcu\WIDTH=8.\g' from process `$paramod\_90_lcu\WIDTH=8.$proc$<techmap.v>:207$2270'.

3.18.19.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.18.19.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\_90_lcu\WIDTH=8.$proc$<techmap.v>:207$2270'.
Cleaned up 0 empty switches.

3.18.20. Executing OPT pass (performing simple optimizations).

3.18.20.1. Executing OPT_EXPR pass (perform const folding).

3.18.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\_90_lcu\WIDTH=8'.
Removed a total of 0 cells.

3.18.20.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\_90_lcu\WIDTH=8..
  removing unused `$and' cell `$and$<techmap.v>:222$2275'.
  removing unused `$and' cell `$and$<techmap.v>:222$2287'.
  removing unused `$and' cell `$and$<techmap.v>:222$2293'.
  removing unused `$and' cell `$and$<techmap.v>:230$2296'.
  removing unused `$and' cell `$and$<techmap.v>:230$2299'.
  removing unused `$and' cell `$and$<techmap.v>:230$2302'.
  removing unused `$and' cell `$and$<techmap.v>:230$2305'.
  removing unused non-port wire \j.
  removing unused non-port wire \i.
  removed 2 unused temporary wires.

3.18.20.5. Finished fast OPT passes.

3.18.21. Continuing TECHMAP pass.
Mapping DC.$auto$alumacc.cc:470:replace_alu$924.lcu using $paramod\_90_lcu\WIDTH=8.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.$ternary$<techmap.v>:258$2193 ($mux) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.$not$<techmap.v>:258$2192 ($not) with simplemap.
Mapping DC.$auto$alumacc.cc:470:replace_alu$924.B_conv ($pos) with simplemap.
Mapping DC.$auto$alumacc.cc:470:replace_alu$924.A_conv ($pos) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.$xor$<techmap.v>:263$2201 ($xor) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.$xor$<techmap.v>:262$2200 ($xor) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.$and$<techmap.v>:260$2199 ($and) with simplemap.
Mapping DC.$auto$alumacc.cc:470:replace_alu$921.lcu using $paramod\_90_lcu\WIDTH=8.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.$ternary$<techmap.v>:258$2198 ($mux) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.$not$<techmap.v>:258$2197 ($not) with simplemap.
Mapping DC.$auto$alumacc.cc:470:replace_alu$921.B_conv ($pos) with simplemap.
Mapping DC.$auto$alumacc.cc:470:replace_alu$921.A_conv ($pos) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$or$<techmap.v>:221$2280 ($or) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$or$<techmap.v>:221$2277 ($or) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$or$<techmap.v>:221$2274 ($or) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$or$<techmap.v>:212$2272 ($or) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$and$<techmap.v>:229$2303 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$and$<techmap.v>:229$2300 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$and$<techmap.v>:229$2297 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$and$<techmap.v>:229$2294 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$and$<techmap.v>:222$2290 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$and$<techmap.v>:222$2284 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$and$<techmap.v>:222$2281 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$and$<techmap.v>:222$2278 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$and$<techmap.v>:221$2291 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$and$<techmap.v>:221$2288 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$and$<techmap.v>:221$2285 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$and$<techmap.v>:221$2282 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$and$<techmap.v>:221$2279 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$or$<techmap.v>:229$2304 ($or) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$or$<techmap.v>:229$2301 ($or) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$or$<techmap.v>:229$2298 ($or) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$or$<techmap.v>:229$2295 ($or) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$or$<techmap.v>:221$2292 ($or) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$or$<techmap.v>:221$2289 ($or) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$or$<techmap.v>:221$2286 ($or) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$or$<techmap.v>:221$2283 ($or) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$or$<techmap.v>:221$2280 ($or) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$or$<techmap.v>:221$2277 ($or) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$or$<techmap.v>:221$2274 ($or) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$and$<techmap.v>:221$2276 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$or$<techmap.v>:212$2272 ($or) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:229$2303 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:229$2300 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$and$<techmap.v>:221$2273 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:229$2297 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:229$2294 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:222$2290 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:222$2284 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:222$2281 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:222$2278 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:221$2291 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:221$2288 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:221$2285 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:221$2282 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:221$2279 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:221$2276 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:221$2273 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:212$2271 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$and$<techmap.v>:212$2271 ($and) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$or$<techmap.v>:229$2304 ($or) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$or$<techmap.v>:229$2301 ($or) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$or$<techmap.v>:229$2298 ($or) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$or$<techmap.v>:229$2295 ($or) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$or$<techmap.v>:221$2292 ($or) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$or$<techmap.v>:221$2289 ($or) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$or$<techmap.v>:221$2286 ($or) with simplemap.
Mapping DC.$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$or$<techmap.v>:221$2283 ($or) with simplemap.
No more expansions possible.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$980' (?0) in module `\BFCPU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$977 [1] = \INST [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$982' (?0) in module `\BFCPU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$977 [3] = \INST [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$994' (?0) in module `\BFCPU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$992 [0] = \INST [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$995' (?0) in module `\BFCPU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$992 [1] = \INST [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$997' (?0) in module `\BFCPU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$992 [3] = \INST [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1010' (?0) in module `\BFCPU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1007 [1] = \INST [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1011' (?0) in module `\BFCPU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1007 [2] = \INST [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1029' (?0) in module `\BFCPU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1025 [2] = \INST [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1042' (?0) in module `\BFCPU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1040 [0] = \INST [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1043' (?0) in module `\BFCPU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1040 [1] = \INST [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1058' (?0) in module `\BFCPU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1055 [1] = \INST [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1077' (?x) in module `\BFCPU' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1075 = 1'x'.
Replacing $_NOT_ cell `$auto$simplemap.cc:206:simplemap_lognot$1081' (x) in module `\BFCPU' with constant driver `$eqx$/home/david/Documents/BFCPU/Brainfuck_CPU/qflow/source/BFCPU.v:47$10_Y = 1'x'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1082' (?x) in module `\BFCPU' with constant driver `$0\reset[0:0] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2354' (??0) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.$ternary$<techmap.v>:258$2198_Y [7] = \WDATA [7]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2353' (??0) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.$ternary$<techmap.v>:258$2198_Y [6] = \WDATA [6]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2352' (??0) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.$ternary$<techmap.v>:258$2198_Y [5] = \WDATA [5]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2351' (??0) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.$ternary$<techmap.v>:258$2198_Y [4] = \WDATA [4]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2347' (??0) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.$ternary$<techmap.v>:258$2198_Y [0] = \WDATA [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2348' (??0) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.$ternary$<techmap.v>:258$2198_Y [1] = \WDATA [1]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2349' (??0) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.$ternary$<techmap.v>:258$2198_Y [2] = \WDATA [2]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2350' (??0) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.$ternary$<techmap.v>:258$2198_Y [3] = \WDATA [3]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$2314' (1) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.$not$<techmap.v>:258$2192_Y [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2306' (101) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.$ternary$<techmap.v>:258$2193_Y [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2237' (?0) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.$xor$<techmap.v>:262$2195_Y [0] = \WDATA [0]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$2320' (0) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.$not$<techmap.v>:258$2192_Y [6] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2312' (011) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.$ternary$<techmap.v>:258$2193_Y [6] = 1'1'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$2319' (0) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.$not$<techmap.v>:258$2192_Y [5] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2311' (011) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.$ternary$<techmap.v>:258$2193_Y [5] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2250' (?1) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.$and$<techmap.v>:260$2194_Y [5] = \WDATA [5]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$2318' (0) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.$not$<techmap.v>:258$2192_Y [4] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2310' (011) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.$ternary$<techmap.v>:258$2193_Y [4] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2249' (?1) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.$and$<techmap.v>:260$2194_Y [4] = \WDATA [4]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$2317' (0) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.$not$<techmap.v>:258$2192_Y [3] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2309' (011) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.$ternary$<techmap.v>:258$2193_Y [3] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2248' (?1) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.$and$<techmap.v>:260$2194_Y [3] = \WDATA [3]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$2316' (0) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.$not$<techmap.v>:258$2192_Y [2] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2308' (011) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.$ternary$<techmap.v>:258$2193_Y [2] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2247' (?1) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.$and$<techmap.v>:260$2194_Y [2] = \WDATA [2]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$2315' (0) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.$not$<techmap.v>:258$2192_Y [1] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2307' (011) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.$ternary$<techmap.v>:258$2193_Y [1] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2246' (?1) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.$and$<techmap.v>:260$2194_Y [1] = \WDATA [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2245' (const_and) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.$and$<techmap.v>:260$2194_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2410' (?1) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.lcu.$and$<techmap.v>:212$2271_Y = \WDATA [0]'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2366' (0?) in module `\DC' with constant driver `$auto$alumacc.cc:484:replace_alu$926 [0] = \WDATA [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2346' (const_and) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.$and$<techmap.v>:260$2199_Y [7] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2345' (const_and) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.$and$<techmap.v>:260$2199_Y [6] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2344' (const_and) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.$and$<techmap.v>:260$2199_Y [5] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2343' (const_and) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.$and$<techmap.v>:260$2199_Y [4] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2342' (const_and) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.$and$<techmap.v>:260$2199_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2341' (const_and) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.$and$<techmap.v>:260$2199_Y [2] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2340' (const_and) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.$and$<techmap.v>:260$2199_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2339' (1?) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.$and$<techmap.v>:260$2199_Y [0] = \WDATA [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2338' (0?) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.$xor$<techmap.v>:262$2200_Y [7] = \WDATA [7]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2337' (0?) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.$xor$<techmap.v>:262$2200_Y [6] = \WDATA [6]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2336' (0?) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.$xor$<techmap.v>:262$2200_Y [5] = \WDATA [5]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2335' (0?) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.$xor$<techmap.v>:262$2200_Y [4] = \WDATA [4]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2334' (0?) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.$xor$<techmap.v>:262$2200_Y [3] = \WDATA [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2333' (0?) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.$xor$<techmap.v>:262$2200_Y [2] = \WDATA [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2332' (0?) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.$xor$<techmap.v>:262$2200_Y [1] = \WDATA [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2405' (const_and) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:221$2282_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2387' (00) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$or$<techmap.v>:221$2283_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2406' (const_and) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:221$2279_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2388' (00) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$or$<techmap.v>:221$2280_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2403' (const_and) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:221$2288_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2385' (00) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$or$<techmap.v>:221$2289_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2407' (const_and) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:221$2276_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2389' (00) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$or$<techmap.v>:221$2277_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2409' (const_and) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:212$2271_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2392' (?0) in module `\DC' with constant driver `$auto$alumacc.cc:484:replace_alu$923 [0] = \WDATA [0]'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2390' (0?) in module `\DC' with constant driver `$auto$alumacc.cc:484:replace_alu$923 [1] = $techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:221$2273_Y'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2386' (0?) in module `\DC' with constant driver `$auto$alumacc.cc:484:replace_alu$923 [3] = $techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:221$2285_Y'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2384' (0?) in module `\DC' with constant driver `$auto$alumacc.cc:484:replace_alu$923 [7] = $techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:221$2291_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2330' (0?) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.$xor$<techmap.v>:263$2201_Y [8] = $techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:221$2291_Y'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2383' (0?) in module `\DC' with constant driver `$auto$alumacc.cc:484:replace_alu$923 [5] = $techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:229$2294_Y'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2380' (0?) in module `\DC' with constant driver `$auto$alumacc.cc:484:replace_alu$923 [6] = $techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:229$2303_Y'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2381' (0?) in module `\DC' with constant driver `$auto$alumacc.cc:484:replace_alu$923 [4] = $techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:229$2300_Y'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2382' (0?) in module `\DC' with constant driver `$auto$alumacc.cc:484:replace_alu$923 [2] = $techmap$auto$alumacc.cc:470:replace_alu$921.lcu.$and$<techmap.v>:229$2297_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2322' (?0) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$921.$xor$<techmap.v>:263$2201_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$921.$xor$<techmap.v>:262$2200_Y [0]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$2321' (0) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.$not$<techmap.v>:258$2192_Y [7] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$2313' (011) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.$ternary$<techmap.v>:258$2193_Y [7] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2251' (?1) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.$and$<techmap.v>:260$2194_Y [6] = \WDATA [6]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2252' (?1) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.$and$<techmap.v>:260$2194_Y [7] = \WDATA [7]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2236' (0?) in module `\DC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$924.$xor$<techmap.v>:263$2196_Y [8] = $auto$alumacc.cc:484:replace_alu$926 [7]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1964' (0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$not$<techmap.v>:258$1668_Y [10] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1949' (011) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$ternary$<techmap.v>:258$1669_Y [10] = 1'1'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1963' (0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$not$<techmap.v>:258$1668_Y [9] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1948' (011) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$ternary$<techmap.v>:258$1669_Y [9] = 1'1'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1962' (0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$not$<techmap.v>:258$1668_Y [8] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1947' (011) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$ternary$<techmap.v>:258$1669_Y [8] = 1'1'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1959' (0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$not$<techmap.v>:258$1668_Y [5] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1944' (011) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$ternary$<techmap.v>:258$1669_Y [5] = 1'1'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1958' (0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$not$<techmap.v>:258$1668_Y [4] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1943' (011) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$ternary$<techmap.v>:258$1669_Y [4] = 1'1'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1961' (0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$not$<techmap.v>:258$1668_Y [7] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1946' (011) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$ternary$<techmap.v>:258$1669_Y [7] = 1'1'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1960' (0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$not$<techmap.v>:258$1668_Y [6] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1945' (011) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$ternary$<techmap.v>:258$1669_Y [6] = 1'1'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1957' (0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$not$<techmap.v>:258$1668_Y [3] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1942' (011) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$ternary$<techmap.v>:258$1669_Y [3] = 1'1'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1956' (0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$not$<techmap.v>:258$1668_Y [2] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1941' (011) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$ternary$<techmap.v>:258$1669_Y [2] = 1'1'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1955' (0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$not$<techmap.v>:258$1668_Y [1] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1940' (011) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$ternary$<techmap.v>:258$1669_Y [1] = 1'1'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1925' (?1) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$and$<techmap.v>:260$1670_Y [1] = \DP [1]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1954' (1) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$not$<techmap.v>:258$1668_Y [0] = 1'0'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1939' (101) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$ternary$<techmap.v>:258$1669_Y [0] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1924' (const_and) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$and$<techmap.v>:260$1670_Y [0] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1893' (?0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$xor$<techmap.v>:262$1671_Y [0] = \DP [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2023' (?1) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.lcu.$and$<techmap.v>:212$1795_Y = \DP [0]'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2054' (0?) in module `\DPC' with constant driver `$auto$alumacc.cc:484:replace_alu$932 [0] = \DP [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1927' (?1) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$and$<techmap.v>:260$1670_Y [3] = \DP [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1926' (?1) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$and$<techmap.v>:260$1670_Y [2] = \DP [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1929' (?1) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$and$<techmap.v>:260$1670_Y [5] = \DP [5]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1928' (?1) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$and$<techmap.v>:260$1670_Y [4] = \DP [4]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1931' (?1) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$and$<techmap.v>:260$1670_Y [7] = \DP [7]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1930' (?1) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$and$<techmap.v>:260$1670_Y [6] = \DP [6]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1933' (?1) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$and$<techmap.v>:260$1670_Y [9] = \DP [9]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1932' (?1) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$and$<techmap.v>:260$1670_Y [8] = \DP [8]'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1968' (0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$not$<techmap.v>:258$1668_Y [14] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1953' (011) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$ternary$<techmap.v>:258$1669_Y [14] = 1'1'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1967' (0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$not$<techmap.v>:258$1668_Y [13] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1952' (011) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$ternary$<techmap.v>:258$1669_Y [13] = 1'1'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1966' (0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$not$<techmap.v>:258$1668_Y [12] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1951' (011) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$ternary$<techmap.v>:258$1669_Y [12] = 1'1'.
Replacing $_NOT_ cell `$auto$simplemap.cc:37:simplemap_not$1965' (0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$not$<techmap.v>:258$1668_Y [11] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1950' (011) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$ternary$<techmap.v>:258$1669_Y [11] = 1'1'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1877' (??0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$ternary$<techmap.v>:258$1664_Y [14] = \DP [14]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1876' (??0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$ternary$<techmap.v>:258$1664_Y [13] = \DP [13]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1875' (??0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$ternary$<techmap.v>:258$1664_Y [12] = \DP [12]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1874' (??0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$ternary$<techmap.v>:258$1664_Y [11] = \DP [11]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1873' (??0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$ternary$<techmap.v>:258$1664_Y [10] = \DP [10]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1872' (??0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$ternary$<techmap.v>:258$1664_Y [9] = \DP [9]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1871' (??0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$ternary$<techmap.v>:258$1664_Y [8] = \DP [8]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1870' (??0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$ternary$<techmap.v>:258$1664_Y [7] = \DP [7]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1869' (??0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$ternary$<techmap.v>:258$1664_Y [6] = \DP [6]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1868' (??0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$ternary$<techmap.v>:258$1664_Y [5] = \DP [5]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1867' (??0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$ternary$<techmap.v>:258$1664_Y [4] = \DP [4]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1863' (??0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$ternary$<techmap.v>:258$1664_Y [0] = \DP [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1733' (?0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$xor$<techmap.v>:263$1667_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$927.$xor$<techmap.v>:262$1666_Y [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1864' (??0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$ternary$<techmap.v>:258$1664_Y [1] = \DP [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1719' (0?) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$xor$<techmap.v>:262$1666_Y [1] = \DP [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1749' (1?) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$and$<techmap.v>:260$1665_Y [0] = \DP [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1970' (const_and) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:212$1795_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2009' (?0) in module `\DPC' with constant driver `$auto$alumacc.cc:484:replace_alu$929 [0] = \DP [0]'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1865' (??0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$ternary$<techmap.v>:258$1664_Y [2] = \DP [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1720' (0?) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$xor$<techmap.v>:262$1666_Y [2] = \DP [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1750' (const_and) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$and$<techmap.v>:260$1665_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2008' (0?) in module `\DPC' with constant driver `$auto$alumacc.cc:484:replace_alu$929 [1] = $techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:221$1797_Y'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1866' (??0) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$ternary$<techmap.v>:258$1664_Y [3] = \DP [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1721' (0?) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$xor$<techmap.v>:262$1666_Y [3] = \DP [3]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1751' (const_and) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$and$<techmap.v>:260$1665_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1993' (0?) in module `\DPC' with constant driver `$auto$alumacc.cc:484:replace_alu$929 [2] = $techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:229$1842_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1722' (0?) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$xor$<techmap.v>:262$1666_Y [4] = \DP [4]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1752' (const_and) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$and$<techmap.v>:260$1665_Y [3] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2021' (const_and) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:221$1800_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2007' (00) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:221$1801_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2001' (0?) in module `\DPC' with constant driver `$auto$alumacc.cc:484:replace_alu$929 [3] = $techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:221$1818_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1723' (0?) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$xor$<techmap.v>:262$1666_Y [5] = \DP [5]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1753' (const_and) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$and$<techmap.v>:260$1665_Y [4] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1992' (0?) in module `\DPC' with constant driver `$auto$alumacc.cc:484:replace_alu$929 [4] = $techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:229$1845_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1724' (0?) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$xor$<techmap.v>:262$1666_Y [6] = \DP [6]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1754' (const_and) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$and$<techmap.v>:260$1665_Y [5] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2020' (const_and) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:221$1803_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2006' (00) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:221$1804_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1996' (0?) in module `\DPC' with constant driver `$auto$alumacc.cc:484:replace_alu$929 [5] = $techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:229$1833_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1725' (0?) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$xor$<techmap.v>:262$1666_Y [7] = \DP [7]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1755' (const_and) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$and$<techmap.v>:260$1665_Y [6] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1991' (0?) in module `\DPC' with constant driver `$auto$alumacc.cc:484:replace_alu$929 [6] = $techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:229$1848_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1726' (0?) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$xor$<techmap.v>:262$1666_Y [8] = \DP [8]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1756' (const_and) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$and$<techmap.v>:260$1665_Y [7] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2019' (const_and) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:221$1806_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2005' (00) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:221$1807_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2014' (const_and) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:221$1821_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2000' (00) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:221$1822_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1998' (0?) in module `\DPC' with constant driver `$auto$alumacc.cc:484:replace_alu$929 [7] = $techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:221$1827_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1727' (0?) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$xor$<techmap.v>:262$1666_Y [9] = \DP [9]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1757' (const_and) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$and$<techmap.v>:260$1665_Y [8] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1990' (0?) in module `\DPC' with constant driver `$auto$alumacc.cc:484:replace_alu$929 [8] = $techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:229$1851_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1728' (0?) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$xor$<techmap.v>:262$1666_Y [10] = \DP [10]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1758' (const_and) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$and$<techmap.v>:260$1665_Y [9] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2018' (const_and) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:221$1809_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2004' (00) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:221$1810_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1995' (0?) in module `\DPC' with constant driver `$auto$alumacc.cc:484:replace_alu$929 [9] = $techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:229$1836_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1729' (0?) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$xor$<techmap.v>:262$1666_Y [11] = \DP [11]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1759' (const_and) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$and$<techmap.v>:260$1665_Y [10] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1989' (0?) in module `\DPC' with constant driver `$auto$alumacc.cc:484:replace_alu$929 [10] = $techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:229$1854_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1934' (?1) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$and$<techmap.v>:260$1670_Y [10] = \DP [10]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1730' (0?) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$xor$<techmap.v>:262$1666_Y [12] = \DP [12]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1760' (const_and) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$and$<techmap.v>:260$1665_Y [11] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2017' (const_and) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:221$1812_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2003' (00) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:221$1813_Y = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2013' (const_and) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:221$1824_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1999' (00) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:221$1825_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1997' (0?) in module `\DPC' with constant driver `$auto$alumacc.cc:484:replace_alu$929 [11] = $techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:229$1830_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1935' (?1) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$and$<techmap.v>:260$1670_Y [11] = \DP [11]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1731' (0?) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$xor$<techmap.v>:262$1666_Y [13] = \DP [13]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1761' (const_and) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$and$<techmap.v>:260$1665_Y [12] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1988' (0?) in module `\DPC' with constant driver `$auto$alumacc.cc:484:replace_alu$929 [12] = $techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:229$1857_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1936' (?1) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$and$<techmap.v>:260$1670_Y [12] = \DP [12]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1732' (0?) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$xor$<techmap.v>:262$1666_Y [14] = \DP [14]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1762' (const_and) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$and$<techmap.v>:260$1665_Y [13] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$2016' (const_and) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:221$1815_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2002' (00) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$or$<techmap.v>:221$1816_Y = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1994' (0?) in module `\DPC' with constant driver `$auto$alumacc.cc:484:replace_alu$929 [13] = $techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:229$1839_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1937' (?1) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$and$<techmap.v>:260$1670_Y [13] = \DP [13]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1763' (const_and) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$and$<techmap.v>:260$1665_Y [14] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1987' (0?) in module `\DPC' with constant driver `$auto$alumacc.cc:484:replace_alu$929 [14] = $techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:229$1860_Y'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1748' (0?) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$927.$xor$<techmap.v>:263$1667_Y [15] = $techmap$auto$alumacc.cc:470:replace_alu$927.lcu.$and$<techmap.v>:229$1860_Y'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1938' (?1) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$and$<techmap.v>:260$1670_Y [14] = \DP [14]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1923' (0?) in module `\DPC' with constant driver `$techmap$auto$alumacc.cc:470:replace_alu$930.$xor$<techmap.v>:263$1672_Y [15] = $auto$alumacc.cc:484:replace_alu$932 [14]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1402' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1398 [2] = \INST [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1371' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1367 [2] = \INST [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1369' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1367 [0] = \INST [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1316' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1311 [3] = \INST [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1315' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1311 [2] = \INST [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1313' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1311 [0] = \INST [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1416' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1413 [1] = \INST [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1216' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1212 [2] = \INST [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1215' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1212 [1] = \INST [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1201' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1197 [2] = \INST [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1200' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1197 [1] = \INST [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1199' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1197 [0] = \INST [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1183' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1178 [3] = \INST [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1180' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1178 [0] = \INST [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1164' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1159 [3] = \INST [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1143' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1141 [0] = \INST [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1431' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1428 [1] = \INST [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1430' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1428 [0] = \INST [0]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1296' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1291 [3] = \INST [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1295' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1291 [2] = \INST [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1267' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1262 [3] = \INST [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1266' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1262 [2] = \INST [2]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1265' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1262 [1] = \INST [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1531' (const_and) in module `\OPC' with constant driver `$techmap$procmux$501.$and$<techmap.v>:434$1384_Y [3] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1111' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1109 [0] = \NEXTOP [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1533' (1?) in module `\OPC' with constant driver `$techmap$procmux$501.$and$<techmap.v>:434$1385_Y [1] = $procmux$108_CMP'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1247' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1244 [1] = \NEXTOP [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1248' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1244 [2] = \NEXTOP [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1561' (const_and) in module `\OPC' with constant driver `$techmap$procmux$501.$and$<techmap.v>:434$1392_Y [1] = 1'0'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1234' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1231 [1] = \NEXTOP [1]'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1599' (0?) in module `\OPC' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1594 [4] = $techmap$procmux$501.$and$<techmap.v>:434$1393_Y [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1537' (1?) in module `\OPC' with constant driver `$techmap$procmux$501.$and$<techmap.v>:434$1386_Y [1] = $procmux$136_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1557' (const_and) in module `\OPC' with constant driver `$techmap$procmux$501.$and$<techmap.v>:434$1391_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1598' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1594 [3] = $techmap$procmux$501.$and$<techmap.v>:434$1390_Y [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1560' (const_and) in module `\OPC' with constant driver `$techmap$procmux$501.$and$<techmap.v>:434$1392_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1573' (0?) in module `\OPC' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1568 [4] = $techmap$procmux$501.$and$<techmap.v>:434$1393_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1536' (const_and) in module `\OPC' with constant driver `$techmap$procmux$501.$and$<techmap.v>:434$1386_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1570' (0?) in module `\OPC' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1568 [1] = $techmap$procmux$501.$and$<techmap.v>:434$1387_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1556' (1?) in module `\OPC' with constant driver `$techmap$procmux$501.$and$<techmap.v>:434$1391_Y [0] = $procmux$510_CMP'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1331' (01?) in module `\OPC' with constant driver `$2\NEXTSTATE[3:0] [3] = $auto$opt_reduce.cc:132:opt_mux$872'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1563' (1?) in module `\OPC' with constant driver `$techmap$procmux$501.$and$<techmap.v>:434$1392_Y [3] = $procmux$511_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1535' (1?) in module `\OPC' with constant driver `$techmap$procmux$501.$and$<techmap.v>:434$1385_Y [3] = $procmux$108_CMP'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1582' (0?) in module `\OPC' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1581 [0] = $procmux$108_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1539' (1?) in module `\OPC' with constant driver `$techmap$procmux$501.$and$<techmap.v>:434$1386_Y [3] = $procmux$136_CMP'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1196' (01?) in module `\OPC' with constant driver `$10\NEXTSTATE[3:0] [3] = \IZ'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1551' (1?) in module `\OPC' with constant driver `$techmap$procmux$501.$and$<techmap.v>:434$1389_Y [3] = $procmux$226_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1559' (1?) in module `\OPC' with constant driver `$techmap$procmux$501.$and$<techmap.v>:434$1391_Y [3] = $procmux$510_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1562' (const_and) in module `\OPC' with constant driver `$techmap$procmux$501.$and$<techmap.v>:434$1392_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1612' (0?) in module `\OPC' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1607 [4] = $techmap$procmux$501.$and$<techmap.v>:434$1393_Y [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1550' (const_and) in module `\OPC' with constant driver `$techmap$procmux$501.$and$<techmap.v>:434$1389_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1610' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1607 [2] = $techmap$procmux$501.$and$<techmap.v>:434$1388_Y [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1558' (const_and) in module `\OPC' with constant driver `$techmap$procmux$501.$and$<techmap.v>:434$1391_Y [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1611' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1607 [3] = $techmap$procmux$501.$and$<techmap.v>:434$1390_Y [2]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1502' (?1) in module `\OPC' with constant driver `$auto$rtlil.cc:1629:And$575 = $procmux$502_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1454' (?1) in module `\OPC' with constant driver `$auto$rtlil.cc:1629:And$579 = $procmux$108_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1456' (?1) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$591 = \IZ'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1455' (?1) in module `\OPC' with constant driver `$auto$rtlil.cc:1629:And$583 = $procmux$136_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1463' (?1) in module `\OPC' with constant driver `$auto$rtlil.cc:1629:And$623 = $procmux$226_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1460' (?1) in module `\OPC' with constant driver `$auto$rtlil.cc:1604:ReduceOr$609 = $10\PCDELTA[15:0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1465' (?1) in module `\OPC' with constant driver `$auto$rtlil.cc:1629:And$631 = $procmux$509_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1464' (?1) in module `\OPC' with constant driver `$auto$rtlil.cc:1629:And$627 = $procmux$247_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1467' (?1) in module `\OPC' with constant driver `$auto$rtlil.cc:1629:And$639 = $procmux$511_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1466' (?1) in module `\OPC' with constant driver `$auto$rtlil.cc:1629:And$635 = $procmux$510_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1469' (?1) in module `\OPC' with constant driver `$auto$rtlil.cc:1629:And$647 = $procmux$310_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1468' (?1) in module `\OPC' with constant driver `$auto$rtlil.cc:1629:And$643 = $procmux$275_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1471' (?1) in module `\OPC' with constant driver `$auto$rtlil.cc:1629:And$655 = $procmux$389_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1470' (?1) in module `\OPC' with constant driver `$auto$rtlil.cc:1629:And$651 = $procmux$348_CMP'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1357' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1352 [3] = \INST [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1355' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1352 [1] = \INST [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1473' (?1) in module `\OPC' with constant driver `$auto$rtlil.cc:1629:And$663 = $procmux$477_CMP'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1337' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1332 [3] = \INST [3]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1335' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1332 [1] = \INST [1]'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1334' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:250:simplemap_eqne$1332 [0] = \INST [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1472' (?1) in module `\OPC' with constant driver `$auto$rtlil.cc:1629:And$659 = $procmux$432_CMP'.
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$1157' (01?) in module `\OPC' with constant driver `$11\PCDELTA[15:0] [0] = \IZ'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1631' (1?) in module `\OPC' with constant driver `$techmap$procmux$518.$and$<techmap.v>:434$1445_Y [0] = $auto$opt_reduce.cc:132:opt_mux$894'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1633' (1?) in module `\OPC' with constant driver `$techmap$procmux$518.$and$<techmap.v>:434$1446_Y [0] = $procmux$108_CMP'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1639' (const_and) in module `\OPC' with constant driver `$techmap$procmux$518.$and$<techmap.v>:434$1449_Y [0] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1657' (0?) in module `\OPC' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1654 [2] = $techmap$procmux$518.$and$<techmap.v>:434$1450_Y [0]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1632' (const_and) in module `\OPC' with constant driver `$techmap$procmux$518.$and$<techmap.v>:434$1445_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1646' (0?) in module `\OPC' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1645 [0] = $techmap$procmux$518.$and$<techmap.v>:434$1446_Y [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1638' (const_and) in module `\OPC' with constant driver `$techmap$procmux$518.$and$<techmap.v>:434$1448_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1647' (?0) in module `\OPC' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1645 [1] = $techmap$procmux$518.$and$<techmap.v>:434$1447_Y [1]'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1644' (const_and) in module `\OPC' with constant driver `$techmap$procmux$518.$and$<techmap.v>:434$1451_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1640' (const_and) in module `\OPC' with constant driver `$techmap$procmux$518.$and$<techmap.v>:434$1449_Y [1] = 1'0'.
Replacing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1642' (const_and) in module `\OPC' with constant driver `$techmap$procmux$518.$and$<techmap.v>:434$1450_Y [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1648' (00) in module `\OPC' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1645 [2] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1651' (00) in module `\OPC' with constant driver `$auto$simplemap.cc:127:simplemap_reduce$1649 [1] = 1'0'.
Replacing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1653' (?0) in module `\OPC' with constant driver `$techmap$procmux$518.$reduce_or$<techmap.v>:441$1453_Y = $auto$simplemap.cc:127:simplemap_reduce$1649 [0]'.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BFCPU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1045' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1060'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1040 [3] = $auto$simplemap.cc:250:simplemap_eqne$1055 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1045' from module `\BFCPU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1027' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1057'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1025 [0] = $auto$simplemap.cc:250:simplemap_eqne$1055 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1027' from module `\BFCPU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1030' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1060'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1025 [3] = $auto$simplemap.cc:250:simplemap_eqne$1055 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1030' from module `\BFCPU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1009' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1028'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1007 [0] = $auto$simplemap.cc:250:simplemap_eqne$1025 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1009' from module `\BFCPU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$996' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1059'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$992 [2] = $auto$simplemap.cc:250:simplemap_eqne$1055 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$996' from module `\BFCPU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$981' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1059'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$977 [2] = $auto$simplemap.cc:250:simplemap_eqne$1055 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$981' from module `\BFCPU'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1049' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1001'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1048 [0] = $auto$simplemap.cc:127:simplemap_reduce$1000 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1049' from module `\BFCPU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$979' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1057'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$977 [0] = $auto$simplemap.cc:250:simplemap_eqne$1055 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$979' from module `\BFCPU'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1044' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1059'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1040 [2] = $auto$simplemap.cc:250:simplemap_eqne$1055 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1044' from module `\BFCPU'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$987' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1002'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$985 [1] = $auto$simplemap.cc:127:simplemap_reduce$1000 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$987' from module `\BFCPU'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$986' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1064'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$985 [0] = $auto$simplemap.cc:127:simplemap_reduce$1063 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$986' from module `\BFCPU'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1050' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1065'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1048 [1] = $auto$simplemap.cc:127:simplemap_reduce$1063 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1050' from module `\BFCPU'.
Finding identical cells in module `\DC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$2331' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$2228'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$921.$xor$<techmap.v>:262$2200_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$924.$xor$<techmap.v>:263$2196_Y [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$2331' from module `\DC'.
Finding identical cells in module `\DPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1718' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1908'.
    Redirecting output \Y: $techmap$auto$alumacc.cc:470:replace_alu$927.$xor$<techmap.v>:262$1666_Y [0] = $techmap$auto$alumacc.cc:470:replace_alu$930.$xor$<techmap.v>:263$1672_Y [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1718' from module `\DPC'.
Finding identical cells in module `\OPC'.
  Cell `$auto$simplemap.cc:517:simplemap_dlatch$1499' is identical to cell `$auto$simplemap.cc:517:simplemap_dlatch$1500'.
    Redirecting output \Q: \bracketcount [5] = \bracketcount [6]
    Removing $_DLATCH_P_ cell `$auto$simplemap.cc:517:simplemap_dlatch$1499' from module `\OPC'.
  Cell `$auto$simplemap.cc:517:simplemap_dlatch$1498' is identical to cell `$auto$simplemap.cc:517:simplemap_dlatch$1500'.
    Redirecting output \Q: \bracketcount [4] = \bracketcount [6]
    Removing $_DLATCH_P_ cell `$auto$simplemap.cc:517:simplemap_dlatch$1498' from module `\OPC'.
  Cell `$auto$simplemap.cc:517:simplemap_dlatch$1497' is identical to cell `$auto$simplemap.cc:517:simplemap_dlatch$1500'.
    Redirecting output \Q: \bracketcount [3] = \bracketcount [6]
    Removing $_DLATCH_P_ cell `$auto$simplemap.cc:517:simplemap_dlatch$1497' from module `\OPC'.
  Cell `$auto$simplemap.cc:517:simplemap_dlatch$1496' is identical to cell `$auto$simplemap.cc:517:simplemap_dlatch$1500'.
    Redirecting output \Q: \bracketcount [2] = \bracketcount [6]
    Removing $_DLATCH_P_ cell `$auto$simplemap.cc:517:simplemap_dlatch$1496' from module `\OPC'.
  Cell `$auto$simplemap.cc:517:simplemap_dlatch$1495' is identical to cell `$auto$simplemap.cc:517:simplemap_dlatch$1500'.
    Redirecting output \Q: \bracketcount [1] = \bracketcount [6]
    Removing $_DLATCH_P_ cell `$auto$simplemap.cc:517:simplemap_dlatch$1495' from module `\OPC'.
  Cell `$auto$simplemap.cc:517:simplemap_dlatch$1494' is identical to cell `$auto$simplemap.cc:517:simplemap_dlatch$1500'.
    Redirecting output \Q: \bracketcount [0] = \bracketcount [6]
    Removing $_DLATCH_P_ cell `$auto$simplemap.cc:517:simplemap_dlatch$1494' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1634' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1534'.
    Redirecting output \Y: $techmap$procmux$518.$and$<techmap.v>:434$1446_Y [1] = $techmap$procmux$501.$and$<techmap.v>:434$1385_Y [2]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1634' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1532' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1534'.
    Redirecting output \Y: $techmap$procmux$501.$and$<techmap.v>:434$1385_Y [0] = $techmap$procmux$501.$and$<techmap.v>:434$1385_Y [2]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1532' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1417' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1432'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1413 [2] = $auto$simplemap.cc:250:simplemap_eqne$1428 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1417' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1418' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1433'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1413 [3] = $auto$simplemap.cc:250:simplemap_eqne$1428 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1418' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1400' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1415'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1398 [0] = $auto$simplemap.cc:250:simplemap_eqne$1413 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1400' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1403' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1433'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1398 [3] = $auto$simplemap.cc:250:simplemap_eqne$1428 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1403' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1370' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1401'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1367 [1] = $auto$simplemap.cc:250:simplemap_eqne$1398 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1370' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1372' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1433'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1367 [3] = $auto$simplemap.cc:250:simplemap_eqne$1428 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1372' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1356' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1432'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1352 [2] = $auto$simplemap.cc:250:simplemap_eqne$1428 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1356' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1354' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1415'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1352 [0] = $auto$simplemap.cc:250:simplemap_eqne$1413 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1354' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1348' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1504'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1347 [0] = $auto$simplemap.cc:127:simplemap_reduce$1503
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1348' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1341' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1437'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1340 [0] = $auto$simplemap.cc:127:simplemap_reduce$1436 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1341' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1336' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1432'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1332 [2] = $auto$simplemap.cc:250:simplemap_eqne$1428 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1336' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1314' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1401'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1311 [1] = $auto$simplemap.cc:250:simplemap_eqne$1398 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1314' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1301' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1321'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1299 [1] = $auto$simplemap.cc:127:simplemap_reduce$1319 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1301' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1294' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1401'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1291 [1] = $auto$simplemap.cc:250:simplemap_eqne$1398 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1294' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1293' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1415'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1291 [0] = $auto$simplemap.cc:250:simplemap_eqne$1413 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1293' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1284' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1478'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1283 = $auto$simplemap.cc:127:simplemap_reduce$1474 [3]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1284' from module `\OPC'.
  Cell `$auto$simplemap.cc:177:logic_reduce$1279' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1321'.
    Redirecting output \Y: $auto$simplemap.cc:168:logic_reduce$1277 [1] = $auto$simplemap.cc:127:simplemap_reduce$1319 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:177:logic_reduce$1279' from module `\OPC'.
  Cell `$auto$simplemap.cc:177:logic_reduce$1278' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1437'.
    Redirecting output \Y: $auto$simplemap.cc:168:logic_reduce$1277 [0] = $auto$simplemap.cc:127:simplemap_reduce$1436 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:177:logic_reduce$1278' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1272' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1321'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1270 [1] = $auto$simplemap.cc:127:simplemap_reduce$1319 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1272' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1621' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1655'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1620 [0] = $auto$simplemap.cc:127:simplemap_reduce$1654 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1621' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1264' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1415'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1262 [0] = $auto$simplemap.cc:250:simplemap_eqne$1413 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1264' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1233' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1246'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1231 [0] = $auto$simplemap.cc:250:simplemap_eqne$1244 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1233' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1214' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1415'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1212 [0] = $auto$simplemap.cc:250:simplemap_eqne$1413 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1214' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1217' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1433'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1212 [3] = $auto$simplemap.cc:250:simplemap_eqne$1428 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1217' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1206' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1437'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1205 [0] = $auto$simplemap.cc:127:simplemap_reduce$1436 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1206' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1202' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1433'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1197 [3] = $auto$simplemap.cc:250:simplemap_eqne$1428 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1202' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1182' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1432'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1178 [2] = $auto$simplemap.cc:250:simplemap_eqne$1428 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1182' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1181' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1401'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1178 [1] = $auto$simplemap.cc:250:simplemap_eqne$1398 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1181' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1163' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1432'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1159 [2] = $auto$simplemap.cc:250:simplemap_eqne$1428 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1163' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1162' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1401'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1159 [1] = $auto$simplemap.cc:250:simplemap_eqne$1398 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1162' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1161' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1415'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1159 [0] = $auto$simplemap.cc:250:simplemap_eqne$1413 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1161' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1145' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1432'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1141 [2] = $auto$simplemap.cc:250:simplemap_eqne$1428 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1145' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1144' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1401'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1141 [1] = $auto$simplemap.cc:250:simplemap_eqne$1398 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1144' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1146' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1433'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1141 [3] = $auto$simplemap.cc:250:simplemap_eqne$1428 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1146' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1129' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1432'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1125 [2] = $auto$simplemap.cc:250:simplemap_eqne$1428 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1129' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1128' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1401'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1125 [1] = $auto$simplemap.cc:250:simplemap_eqne$1398 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1128' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1127' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1415'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1125 [0] = $auto$simplemap.cc:250:simplemap_eqne$1413 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1127' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1130' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1433'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1125 [3] = $auto$simplemap.cc:250:simplemap_eqne$1428 [3]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1130' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1113' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1235'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1109 [2] = $auto$simplemap.cc:250:simplemap_eqne$1231 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1113' from module `\OPC'.
  Cell `$auto$simplemap.cc:177:logic_reduce$1099' is identical to cell `$auto$simplemap.cc:177:logic_reduce$1100'.
    Redirecting output \Y: $auto$simplemap.cc:168:logic_reduce$1097 [1] = $auto$simplemap.cc:168:logic_reduce$1097 [2]
    Removing $_OR_ cell `$auto$simplemap.cc:177:logic_reduce$1099' from module `\OPC'.
  Cell `$auto$simplemap.cc:177:logic_reduce$1098' is identical to cell `$auto$simplemap.cc:177:logic_reduce$1100'.
    Redirecting output \Y: $auto$simplemap.cc:168:logic_reduce$1097 [0] = $auto$simplemap.cc:168:logic_reduce$1097 [2]
    Removing $_OR_ cell `$auto$simplemap.cc:177:logic_reduce$1098' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1087' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1112'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1084 [1] = $auto$simplemap.cc:250:simplemap_eqne$1109 [1]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1087' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1086' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1246'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1084 [0] = $auto$simplemap.cc:250:simplemap_eqne$1244 [0]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1086' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1088' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1235'.
    Redirecting output \Y: $auto$simplemap.cc:250:simplemap_eqne$1084 [2] = $auto$simplemap.cc:250:simplemap_eqne$1231 [2]
    Removing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$1088' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1327' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1307'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$892 = $auto$simplemap.cc:127:simplemap_reduce$1306
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1327' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1124' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1477'.
    Redirecting output \Y: $auto$opt_reduce.cc:132:opt_mux$902 = $auto$simplemap.cc:127:simplemap_reduce$1474 [2]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1124' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1457' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1635'.
    Redirecting output \Y: $auto$rtlil.cc:1604:ReduceOr$597 = $techmap$procmux$518.$and$<techmap.v>:434$1447_Y [0]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1457' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1461' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1637'.
    Redirecting output \Y: $auto$rtlil.cc:1604:ReduceOr$615 = $techmap$procmux$518.$and$<techmap.v>:434$1448_Y [0]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1461' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1548' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1549'.
    Redirecting output \Y: $techmap$procmux$501.$and$<techmap.v>:434$1389_Y [0] = $techmap$procmux$501.$and$<techmap.v>:434$1389_Y [1]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1548' from module `\OPC'.
  Cell `$auto$simplemap.cc:517:simplemap_dlatch$1501' is identical to cell `$auto$simplemap.cc:517:simplemap_dlatch$1500'.
    Redirecting output \Q: \bracketcount [7] = \bracketcount [6]
    Removing $_DLATCH_P_ cell `$auto$simplemap.cc:517:simplemap_dlatch$1501' from module `\OPC'.
  Cell `$auto$simplemap.cc:277:simplemap_mux$1158' is identical to cell `$auto$simplemap.cc:37:simplemap_not$1459'.
    Redirecting output \Y: $11\PCDELTA[15:0] [15] = $10\PCDELTA[15:0]
    Removing $_NOT_ cell `$auto$simplemap.cc:277:simplemap_mux$1158' from module `\OPC'.
  Cell `$auto$simplemap.cc:277:simplemap_mux$1177' is identical to cell `$auto$simplemap.cc:37:simplemap_not$1459'.
    Redirecting output \Y: $11\NEXTSTATE[3:0] [3] = $10\PCDELTA[15:0]
    Removing $_NOT_ cell `$auto$simplemap.cc:277:simplemap_mux$1177' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1342' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1362'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1340 [1] = $auto$simplemap.cc:127:simplemap_reduce$1360 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1342' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1320' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1376'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1319 [0] = $auto$simplemap.cc:127:simplemap_reduce$1375 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1320' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1271' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1361'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1270 [0] = $auto$simplemap.cc:127:simplemap_reduce$1360 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1271' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1239' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1252'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1238 = $auto$simplemap.cc:127:simplemap_reduce$1251
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1239' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1222' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1377'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1220 [1] = $auto$simplemap.cc:127:simplemap_reduce$1375 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1222' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1221' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1361'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1220 [0] = $auto$simplemap.cc:127:simplemap_reduce$1360 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1221' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1207' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1377'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1205 [1] = $auto$simplemap.cc:127:simplemap_reduce$1375 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1207' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1188' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1362'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1186 [1] = $auto$simplemap.cc:127:simplemap_reduce$1360 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1188' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1187' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1376'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1186 [0] = $auto$simplemap.cc:127:simplemap_reduce$1375 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1187' from module `\OPC'.
  Cell `$auto$simplemap.cc:85:simplemap_bitop$1636' is identical to cell `$auto$simplemap.cc:85:simplemap_bitop$1547'.
    Redirecting output \Y: $techmap$procmux$518.$and$<techmap.v>:434$1447_Y [1] = $techmap$procmux$501.$and$<techmap.v>:434$1387_Y [3]
    Removing $_AND_ cell `$auto$simplemap.cc:85:simplemap_bitop$1636' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1169' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1362'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1167 [1] = $auto$simplemap.cc:127:simplemap_reduce$1360 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1169' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1168' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1300'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1167 [0] = $auto$simplemap.cc:127:simplemap_reduce$1299 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1168' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1150' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1376'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1149 [0] = $auto$simplemap.cc:127:simplemap_reduce$1375 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1150' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1135' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1151'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1133 [1] = $auto$simplemap.cc:127:simplemap_reduce$1149 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1135' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1134' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1300'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1133 [0] = $auto$simplemap.cc:127:simplemap_reduce$1299 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1134' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1438' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1151'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1436 [1] = $auto$simplemap.cc:127:simplemap_reduce$1149 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1438' from module `\OPC'.
  Cell `$auto$simplemap.cc:177:logic_reduce$1100' is identical to cell `$auto$simplemap.cc:177:logic_reduce$1101'.
    Redirecting output \Y: $auto$simplemap.cc:168:logic_reduce$1097 [2] = $auto$simplemap.cc:168:logic_reduce$1097 [3]
    Removing $_OR_ cell `$auto$simplemap.cc:177:logic_reduce$1100' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1423' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1151'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1421 [1] = $auto$simplemap.cc:127:simplemap_reduce$1149 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1423' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1422' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1361'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1421 [0] = $auto$simplemap.cc:127:simplemap_reduce$1360 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1422' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1408' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1377'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1406 [1] = $auto$simplemap.cc:127:simplemap_reduce$1375 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1408' from module `\OPC'.
  Cell `$auto$simplemap.cc:136:simplemap_reduce$1407' is identical to cell `$auto$simplemap.cc:136:simplemap_reduce$1300'.
    Redirecting output \Y: $auto$simplemap.cc:127:simplemap_reduce$1406 [0] = $auto$simplemap.cc:127:simplemap_reduce$1299 [0]
    Removing $_OR_ cell `$auto$simplemap.cc:136:simplemap_reduce$1407' from module `\OPC'.
  Cell `$auto$simplemap.cc:177:logic_reduce$1103' is identical to cell `$auto$simplemap.cc:177:logic_reduce$1104'.
    Redirecting output \Y: $auto$simplemap.cc:168:logic_reduce$1102 [0] = $auto$simplemap.cc:168:logic_reduce$1102 [1]
    Removing $_OR_ cell `$auto$simplemap.cc:177:logic_reduce$1103' from module `\OPC'.
Removed a total of 96 cells.

3.19.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BFCPU..
  removing unused `$_XOR_' cell `$auto$simplemap.cc:136:simplemap_reduce$1071'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:136:simplemap_reduce$1072'.
  removing unused `$_XOR_' cell `$auto$simplemap.cc:136:simplemap_reduce$1074'.
Finding unused cells or wires in module \DC..
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$2362'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$2361'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$2360'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$2359'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$2358'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$2357'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$2356'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$2355'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$2371'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$2372'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$2375'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$2376'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$2378'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$2398'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$2399'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$2402'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2415'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2416'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2418'.
Finding unused cells or wires in module \DPC..
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$1892'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$1891'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$1890'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$1889'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$1888'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$1887'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$1886'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$1885'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$1884'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$1883'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$1882'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$1881'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$1880'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$1879'.
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$1878'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$2010'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$2053'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$2076'.
Finding unused cells or wires in module \OPC..

3.19.5. Finished fast OPT passes.

3.20. Executing ABC pass (technology mapping using ABC).

3.20.1. Extracting gate netlist of module `\BFCPU' to `<abc-temp-dir>/input.blif'..
Extracted 26 gates and 31 wires to a netlist network with 4 inputs and 7 outputs.

3.20.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       13
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               NOT cells:        3
ABC RESULTS:        internal signals:       20
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        7
Removing temp directory.

3.20.2. Extracting gate netlist of module `\DC' to `<abc-temp-dir>/input.blif'..
Extracted 160 gates and 209 wires to a netlist network with 47 inputs and 27 outputs.

3.20.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.2.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       13
ABC RESULTS:              AOI3 cells:        9
ABC RESULTS:               MUX cells:       82
ABC RESULTS:               NOR cells:        6
ABC RESULTS:               NOT cells:       17
ABC RESULTS:              OAI3 cells:        2
ABC RESULTS:                OR cells:        4
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:               XOR cells:       14
ABC RESULTS:        internal signals:      135
ABC RESULTS:           input signals:       47
ABC RESULTS:          output signals:       27
Removing temp directory.

3.20.3. Extracting gate netlist of module `\DPC' to `<abc-temp-dir>/input.blif'..
Extracted 144 gates and 162 wires to a netlist network with 17 inputs and 15 outputs.

3.20.3.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.3.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       25
ABC RESULTS:              AOI3 cells:        6
ABC RESULTS:               MUX cells:       29
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:       17
ABC RESULTS:               NOT cells:        4
ABC RESULTS:              OAI3 cells:        4
ABC RESULTS:                OR cells:       10
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:       26
ABC RESULTS:        internal signals:      130
ABC RESULTS:           input signals:       17
ABC RESULTS:          output signals:       15
Removing temp directory.

3.20.4. Extracting gate netlist of module `\OPC' to `<abc-temp-dir>/input.blif'..
Extracted 193 gates and 206 wires to a netlist network with 11 inputs and 7 outputs.

3.20.4.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime -o 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       41
ABC RESULTS:              AOI3 cells:       10
ABC RESULTS:              AOI4 cells:        2
ABC RESULTS:               MUX cells:        7
ABC RESULTS:              NAND cells:        9
ABC RESULTS:               NOR cells:        9
ABC RESULTS:               NOT cells:       12
ABC RESULTS:              OAI3 cells:       12
ABC RESULTS:              OAI4 cells:        5
ABC RESULTS:                OR cells:       13
ABC RESULTS:        internal signals:      188
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        7
Removing temp directory.

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing away select inverter for $_MUX_ cell `$abc$2438$auto$blifparse.cc:286:parse_blif$2475' in module `DC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2438$auto$blifparse.cc:286:parse_blif$2494' in module `DC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2438$auto$blifparse.cc:286:parse_blif$2495' in module `DC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2438$auto$blifparse.cc:286:parse_blif$2484' in module `DC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2438$auto$blifparse.cc:286:parse_blif$2485' in module `DC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2438$auto$blifparse.cc:286:parse_blif$2476' in module `DC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2438$auto$blifparse.cc:286:parse_blif$2512' in module `DC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2438$auto$blifparse.cc:286:parse_blif$2513' in module `DC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2438$auto$blifparse.cc:286:parse_blif$2502' in module `DC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2438$auto$blifparse.cc:286:parse_blif$2503' in module `DC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2438$auto$blifparse.cc:286:parse_blif$2521' in module `DC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2438$auto$blifparse.cc:286:parse_blif$2522' in module `DC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2438$auto$blifparse.cc:286:parse_blif$2457' in module `DC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2438$auto$blifparse.cc:286:parse_blif$2468' in module `DC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2438$auto$blifparse.cc:286:parse_blif$2469' in module `DC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2711' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2593' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2696' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2697' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2712' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2636' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2637' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2702' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2703' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2596' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2618' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2619' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2627' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2597' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2609' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2628' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2602' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2603' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2610' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2683' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2684' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2676' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2677' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2667' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2668' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2657' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2658' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2643' in module `DPC'.
Optimizing away select inverter for $_MUX_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2644' in module `DPC'.

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BFCPU'.
Finding identical cells in module `\DC'.
  Cell `$abc$2438$auto$blifparse.cc:286:parse_blif$2473' is identical to cell `$abc$2438$auto$blifparse.cc:286:parse_blif$2439'.
    Redirecting output \Y: $abc$2438$n109 = $abc$2438$n75
    Removing $_NOR_ cell `$abc$2438$auto$blifparse.cc:286:parse_blif$2473' from module `\DC'.
Finding identical cells in module `\DPC'.
  Cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2622' is identical to cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2615'.
    Redirecting output \Y: $abc$2587$n67_1 = $abc$2587$n60_1
    Removing $_OR_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2622' from module `\DPC'.
  Cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2623' is identical to cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2614'.
    Redirecting output \Y: $abc$2587$n68_1 = $abc$2587$n59_1
    Removing $_NOR_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2623' from module `\DPC'.
  Cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2651' is identical to cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2633'.
    Redirecting output \Y: $abc$2587$n96 = $abc$2587$n78
    Removing $_NOR_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2651' from module `\DPC'.
  Cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2653' is identical to cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2649'.
    Redirecting output \Y: $abc$2587$n98 = $abc$2587$n94
    Removing $_NOR_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2653' from module `\DPC'.
  Cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2662' is identical to cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2652'.
    Redirecting output \Y: $abc$2587$n107 = $abc$2587$n97
    Removing $_OR_ cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2662' from module `\DPC'.
Finding identical cells in module `\OPC'.
Removed a total of 6 cells.

3.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BFCPU..
Finding unused cells or wires in module \DC..
  removing unused `$_NOT_' cell `$abc$2438$auto$blifparse.cc:286:parse_blif$2464'.
Finding unused cells or wires in module \DPC..
  removing unused `$_NOT_' cell `$abc$2587$auto$blifparse.cc:286:parse_blif$2588'.
Finding unused cells or wires in module \OPC..

3.21.5. Finished fast OPT passes.

3.22. Executing HIERARCHY pass (managing design hierarchy).

3.22.1. Analyzing design hierarchy..
Top module:  \BFCPU
Used module:     \DC
Used module:     \DPC
Used module:     \OPC

3.22.2. Analyzing design hierarchy..
Top module:  \BFCPU
Used module:     \DC
Used module:     \DPC
Used module:     \OPC
Removed 0 unused modules.

3.23. Printing statistics.

=== BFCPU ===

   Number of wires:                 34
   Number of wire bits:            112
   Number of public wires:          23
   Number of public wire bits:     101
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 22
     $_AND_                         13
     $_DFF_P_                        1
     $_NOR_                          2
     $_NOT_                          3
     DC                              1
     DPC                             1
     OPC                             1

=== DC ===

   Number of wires:                136
   Number of wire bits:            202
   Number of public wires:          13
   Number of public wire bits:      57
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                172
     $_AND_                         13
     $_AOI3_                         9
     $_DFF_P_                       26
     $_MUX_                         82
     $_NOR_                          5
     $_NOT_                         16
     $_OAI3_                         2
     $_OR_                           4
     $_XNOR_                         1
     $_XOR_                         14

=== DPC ===

   Number of wires:                109
   Number of wire bits:            137
   Number of public wires:           4
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                134
     $_AND_                         25
     $_AOI3_                         6
     $_DFF_P_                       15
     $_MUX_                         29
     $_NAND_                         2
     $_NOR_                         14
     $_NOT_                          3
     $_OAI3_                         4
     $_OR_                           8
     $_XNOR_                         2
     $_XOR_                         26

=== OPC ===

   Number of wires:                123
   Number of wire bits:            153
   Number of public wires:           9
   Number of public wire bits:      39
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                125
     $_AND_                         41
     $_AOI3_                        10
     $_AOI4_                         2
     $_DFF_P_                        4
     $_DLATCH_P_                     1
     $_MUX_                          7
     $_NAND_                         9
     $_NOR_                          9
     $_NOT_                         12
     $_OAI3_                        12
     $_OAI4_                         5
     $_OR_                          13

=== design hierarchy ===

   BFCPU                             1
     DC                              1
     DPC                             1
     OPC                             1

   Number of wires:                402
   Number of wire bits:            604
   Number of public wires:          49
   Number of public wire bits:     215
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                450
     $_AND_                         92
     $_AOI3_                        25
     $_AOI4_                         2
     $_DFF_P_                       46
     $_DLATCH_P_                     1
     $_MUX_                        118
     $_NAND_                        11
     $_NOR_                         30
     $_NOT_                         34
     $_OAI3_                        18
     $_OAI4_                         5
     $_OR_                          25
     $_XNOR_                         3
     $_XOR_                         40

3.24. Executing CHECK pass (checking for obvious problems).
checking module BFCPU..
checking module DC..
checking module DPC..
checking module OPC..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\BFCPU':
  mapped 1 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\DC':
  mapped 26 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\DPC':
  mapped 15 $_DFF_P_ cells to \DFFPOSX1 cells.
Mapping DFF cells in module `\OPC':
  mapped 4 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BFCPU'.
Finding identical cells in module `\DC'.
Finding identical cells in module `\DPC'.
Finding identical cells in module `\OPC'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BFCPU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \DC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \DPC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \OPC..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BFCPU.
  Optimizing cells in module \DC.
  Optimizing cells in module \DPC.
  Optimizing cells in module \OPC.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BFCPU'.
Finding identical cells in module `\DC'.
Finding identical cells in module `\DPC'.
Finding identical cells in module `\OPC'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BFCPU..
Finding unused cells or wires in module \DC..
Finding unused cells or wires in module \DPC..
Finding unused cells or wires in module \OPC..

5.8. Executing OPT_EXPR pass (perform const folding).

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\BFCPU' to `<abc-temp-dir>/input.blif'..
Extracted 18 gates and 22 wires to a netlist network with 4 inputs and 7 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        1
ABC RESULTS:             INVX1 cells:        3
ABC RESULTS:           NAND2X1 cells:        5
ABC RESULTS:            NOR2X1 cells:        7
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:        internal signals:       11
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        7
Removing temp directory.

6.2. Extracting gate netlist of module `\DC' to `<abc-temp-dir>/input.blif'..
Extracted 146 gates and 193 wires to a netlist network with 47 inputs and 27 outputs.

6.2.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.2.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        9
ABC RESULTS:           AOI21X1 cells:       14
ABC RESULTS:           AOI22X1 cells:        2
ABC RESULTS:             INVX1 cells:       25
ABC RESULTS:            MUX2X1 cells:        4
ABC RESULTS:           NAND2X1 cells:       14
ABC RESULTS:           NAND3X1 cells:        8
ABC RESULTS:            NOR2X1 cells:       25
ABC RESULTS:            NOR3X1 cells:        3
ABC RESULTS:           OAI21X1 cells:       30
ABC RESULTS:           OAI22X1 cells:        1
ABC RESULTS:           XNOR2X1 cells:        1
ABC RESULTS:            XOR2X1 cells:        2
ABC RESULTS:        internal signals:      119
ABC RESULTS:           input signals:       47
ABC RESULTS:          output signals:       27
Removing temp directory.

6.3. Extracting gate netlist of module `\DPC' to `<abc-temp-dir>/input.blif'..
Extracted 119 gates and 136 wires to a netlist network with 17 inputs and 15 outputs.

6.3.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.3.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        4
ABC RESULTS:           AOI21X1 cells:        8
ABC RESULTS:             INVX1 cells:       13
ABC RESULTS:           NAND2X1 cells:       11
ABC RESULTS:           NAND3X1 cells:        6
ABC RESULTS:            NOR2X1 cells:        9
ABC RESULTS:            NOR3X1 cells:        5
ABC RESULTS:           OAI21X1 cells:       15
ABC RESULTS:             OR2X2 cells:        2
ABC RESULTS:           XNOR2X1 cells:       12
ABC RESULTS:            XOR2X1 cells:        3
ABC RESULTS:        internal signals:      104
ABC RESULTS:           input signals:       17
ABC RESULTS:          output signals:       15
Removing temp directory.

6.4. Extracting gate netlist of module `\OPC' to `<abc-temp-dir>/input.blif'..
Extracted 120 gates and 131 wires to a netlist network with 11 inputs and 7 outputs.

6.4.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.4.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        2
ABC RESULTS:           AOI21X1 cells:        4
ABC RESULTS:             INVX1 cells:       14
ABC RESULTS:           NAND2X1 cells:       14
ABC RESULTS:           NAND3X1 cells:       11
ABC RESULTS:            NOR2X1 cells:       19
ABC RESULTS:            NOR3X1 cells:       12
ABC RESULTS:           OAI21X1 cells:       14
ABC RESULTS:           OAI22X1 cells:        3
ABC RESULTS:             OR2X2 cells:        1
ABC RESULTS:        internal signals:      113
ABC RESULTS:           input signals:       11
ABC RESULTS:          output signals:        7
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
Mapping BFCPU.DC1 using DC.
Mapping BFCPU.OPC1 using OPC.
Mapping BFCPU.DPC1 using DPC.
No more expansions possible.
Deleting now unused module DC.
Deleting now unused module DPC.
Deleting now unused module OPC.
Removed 0 unused cells and 500 unused wires.

8. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port BFCPU.DP using BUFX2.
Don't map input port BFCPU.INPD: Missing option -inpad.
Mapping port BFCPU.IR using BUFX2.
Don't map input port BFCPU.NEXTOP: Missing option -inpad.
Mapping port BFCPU.OUTPD using BUFX2.
Mapping port BFCPU.OW using BUFX2.
Mapping port BFCPU.PCDELTA using BUFX2.
Mapping port BFCPU.RD using BUFX2.
Don't map input port BFCPU.RDATA: Missing option -inpad.
Don't map input port BFCPU.RF: Missing option -inpad.
Mapping port BFCPU.WD using BUFX2.
Mapping port BFCPU.WDATA using BUFX2.
Don't map input port BFCPU.WF: Missing option -inpad.
Don't map input port BFCPU.clk: Missing option -inpad.
Mapping port BFCPU.reset using BUFX2.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BFCPU'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \BFCPU..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \BFCPU.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\BFCPU'.
Removed a total of 0 cells.

9.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \BFCPU..

9.8. Executing OPT_EXPR pass (perform const folding).

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing BLIF backend.

11. Printing statistics.

=== BFCPU ===

   Number of wires:                321
   Number of wire bits:            496
   Number of public wires:         321
   Number of public wire bits:     496
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                444
     $_DLATCH_P_                     1
     AND2X2                         16
     AOI21X1                        26
     AOI22X1                         2
     BUFX2                          60
     DFFPOSX1                       46
     INVX1                          55
     MUX2X1                          4
     NAND2X1                        44
     NAND3X1                        25
     NOR2X1                         60
     NOR3X1                         20
     OAI21X1                        59
     OAI22X1                         4
     OR2X2                           4
     XNOR2X1                        13
     XOR2X1                          5

End of script. Logfile hash: bc011714f1
CPU: user 1.16s system 0.01s, MEM: 40.37 MB total, 13.30 MB resident
Yosys 0.7 (git sha1 61f6811, gcc 6.2.0-11ubuntu1 -O2 -fdebug-prefix-map=/build/yosys-OIL3SR/yosys-0.7=. -fstack-protector-strong -fPIC -Os)
Time spent: 18% 20x opt_expr (0 sec), 15% 19x opt_merge (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl /usr/local/share/qflow/tech/osu018/osu018_stdcells.lef
Cleaning up output syntax
ypostproc.tcl BFCPU_mapped.blif BFCPU /usr/local/share/qflow/tech/osu018/osu018.sh
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 100 -c 20 -I BFCPU_nofanout -p /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib  -b BUFX2 -i A -o Y tmp.blif BFCPU.blif

Parsing library "osu018_stdcells"
blifFanout for qflow 1.1.121
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 38 (load 700.326) from node DC1.SGN,
driven by DFFPOSX1 with strength 126.421 (fF driven at latency 100)
Top fanout load-to-strength ratio is 7.47698 (latency = 747.698 ps)
Top input node fanout is 46 (load 1284.48) from node clk.
Warning 1: load of 140.998 is 1.2685 times greater than strongest gate OR2X2
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 268.76 is 4.61848 times greater than strongest gate NOR2X1
Warning 9: load of 445.102 is 7.64882 times greater than strongest gate NOR2X1
108 gates exceed specified minimum load.
22 buffers were added.
18 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 363    	Out: 345    	-18
	"2" gates	In: 95    	Out: 110    	+15

Number of gates changed: 40
gates resized: 40
Parsing library "osu018_stdcells"
blifFanout for qflow 1.1.121
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 16 (load 360.775) from node DC1.DOP,
driven by NOR2X1 with strength 58.1923 (fF driven at latency 100)
Top fanout load-to-strength ratio is 4.44664 (latency = 444.664 ps)
Top input node fanout is 9 (load 139.269) from node NEXTOP<0>.
Warning 1: load of 260.61 is 1.15833 times greater than strongest gate BUFX4
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 314.136 is 1.39623 times greater than strongest gate BUFX4
Warning 9: load of 268.76 is 4.61848 times greater than strongest gate NOR2X1
115 gates exceed specified minimum load.
0 buffers were added.
24 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 345    	Out: 345    	+0
	"2" gates	In: 132    	Out: 108    	-24
	"4" gates	In: 2    	Out: 26    	+24
	"8" gates	In: 1    	Out: 1    	+0

Number of gates changed: 24
gates resized: 24
Parsing library "osu018_stdcells"
blifFanout for qflow 1.1.121
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 16 (load 415.95) from node DC1.DOP,
driven by NOR2X1 with strength 58.1923 (fF driven at latency 100)
Top fanout load-to-strength ratio is 4.44664 (latency = 444.664 ps)
Top input node fanout is 9 (load 139.269) from node NEXTOP<0>.
Warning 1: load of 316.719 is 1.40771 times greater than strongest gate BUFX4
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 4: load of 372.424 is 1.6553 times greater than strongest gate BUFX4
Warning 7: load of 425.95 is 1.89321 times greater than strongest gate BUFX4
Warning 24: load of 268.76 is 4.61848 times greater than strongest gate NOR2X1
130 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 345    	Out: 345    	+0
	"2" gates	In: 108    	Out: 108    	+0
	"4" gates	In: 26    	Out: 26    	+0
	"8" gates	In: 1    	Out: 1    	+0

Number of gates changed: 0
gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/david/Documents/BFCPU/Brainfuck_CPU/qflow/synthesis
Files:
   Verilog: /home/david/Documents/BFCPU/Brainfuck_CPU/qflow/synthesis/BFCPU.rtl.v
   Verilog: /home/david/Documents/BFCPU/Brainfuck_CPU/qflow/synthesis/BFCPU.rtlnopwr.v
   Spice:   /home/david/Documents/BFCPU/Brainfuck_CPU/qflow/synthesis/BFCPU.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" BFCPU.spc BFCPU.xspice

Synthesis script ended on Fr Sep 21 16:11:17 CEST 2018
